/**
 * @author mrdoob / http://mrdoob.com/
 */
var QuaternionModule = require('../../math/Quaternion');
var Vector3Module = require('../../math/Vector3');
var Object3DModule = require('../../core/Object3D');
var AudioListener;
AudioListener = function () {
	Object3DModule.Object3D.call(this);
	this.type = 'AudioListener';
	this.context = new (window.AudioContext || window.webkitAudioContext)();
};
AudioListener.prototype = Object.create(Object3DModule.Object3D.prototype);
AudioListener.prototype.constructor = AudioListener;
AudioListener.prototype.updateMatrixWorld = function () {
	var position = new Vector3Module.Vector3();
	var quaternion = new QuaternionModule.Quaternion();
	var scale = new Vector3Module.Vector3();
	var orientation = new Vector3Module.Vector3();
	var velocity = new Vector3Module.Vector3();
	var positionPrev = new Vector3Module.Vector3();
	return function (force) {
		Object3DModule.Object3D.prototype.updateMatrixWorld.call(this, force);
		var listener = this.context.listener;
		var up = this.up;
		this.matrixWorld.decompose(position, quaternion, scale);
		orientation.set(0, 0, -1).applyQuaternion(quaternion);
		velocity.subVectors(position, positionPrev);
		listener.setPosition(position.x, position.y, position.z);
		listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z);
		listener.setVelocity(velocity.x, velocity.y, velocity.z);
		positionPrev.copy(position);
	};
}();
AudioListener.prototype.isAudioListener = true;
exports.AudioListener = AudioListener;