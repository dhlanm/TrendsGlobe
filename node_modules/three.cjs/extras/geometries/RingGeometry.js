/**
 * @author Kaleb Murphy
 */
var SphereModule = require('../../math/Sphere');
var Face3Module = require('../../core/Face3');
var Vector2Module = require('../../math/Vector2');
var Vector3Module = require('../../math/Vector3');
var GeometryModule = require('../../core/Geometry');
var RingGeometry;
RingGeometry = function (innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {
	GeometryModule.Geometry.call(this);
	this.type = 'RingGeometry';
	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};
	innerRadius = innerRadius || 0;
	outerRadius = outerRadius || 50;
	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	thetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;
	phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 8;
	var i, o, uvs = [], radius = innerRadius, radiusStep = (outerRadius - innerRadius) / phiSegments;
	for (i = 0; i < phiSegments + 1; i++) {
		// concentric circles inside ring
		for (o = 0; o < thetaSegments + 1; o++) {
			// number of segments per circle
			var vertex = new Vector3Module.Vector3();
			var segment = thetaStart + o / thetaSegments * thetaLength;
			vertex.x = radius * Math.cos(segment);
			vertex.y = radius * Math.sin(segment);
			this.vertices.push(vertex);
			uvs.push(new Vector2Module.Vector2((vertex.x / outerRadius + 1) / 2, (vertex.y / outerRadius + 1) / 2));
		}
		radius += radiusStep;
	}
	var n = new Vector3Module.Vector3(0, 0, 1);
	for (i = 0; i < phiSegments; i++) {
		// concentric circles inside ring
		var thetaSegment = i * (thetaSegments + 1);
		for (o = 0; o < thetaSegments; o++) {
			// number of segments per circle
			var segment = o + thetaSegment;
			var v1 = segment;
			var v2 = segment + thetaSegments + 1;
			var v3 = segment + thetaSegments + 2;
			this.faces.push(new Face3Module.Face3(v1, v2, v3, [
				n.clone(),
				n.clone(),
				n.clone()
			]));
			this.faceVertexUvs[0].push([
				uvs[v1].clone(),
				uvs[v2].clone(),
				uvs[v3].clone()
			]);
			v1 = segment;
			v2 = segment + thetaSegments + 2;
			v3 = segment + 1;
			this.faces.push(new Face3Module.Face3(v1, v2, v3, [
				n.clone(),
				n.clone(),
				n.clone()
			]));
			this.faceVertexUvs[0].push([
				uvs[v1].clone(),
				uvs[v2].clone(),
				uvs[v3].clone()
			]);
		}
	}
	this.computeFaceNormals();
	this.boundingSphere = new SphereModule.Sphere(new Vector3Module.Vector3(), radius);
};
RingGeometry.prototype = Object.create(GeometryModule.Geometry.prototype);
RingGeometry.prototype.constructor = RingGeometry;
RingGeometry.prototype.isRingGeometry = true;
exports.RingGeometry = RingGeometry;