/**
 * @author alteredq / http://alteredqualia.com/
 */
var QuaternionModule = require('../../math/Quaternion');
var Vector3Module = require('../../math/Vector3');
var Object3DModule = require('../../core/Object3D');
var Gyroscope;
Gyroscope = function () {
	Object3DModule.Object3D.call(this);
};
Gyroscope.prototype = Object.create(Object3DModule.Object3D.prototype);
Gyroscope.prototype.constructor = Gyroscope;
Gyroscope.prototype.updateMatrixWorld = function () {
	var translationObject = new Vector3Module.Vector3();
	var quaternionObject = new QuaternionModule.Quaternion();
	var scaleObject = new Vector3Module.Vector3();
	var translationWorld = new Vector3Module.Vector3();
	var quaternionWorld = new QuaternionModule.Quaternion();
	var scaleWorld = new Vector3Module.Vector3();
	return function (force) {
		this.matrixAutoUpdate && this.updateMatrix();
		// update matrixWorld
		if (this.matrixWorldNeedsUpdate || force) {
			if (this.parent) {
				this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
				this.matrixWorld.decompose(translationWorld, quaternionWorld, scaleWorld);
				this.matrix.decompose(translationObject, quaternionObject, scaleObject);
				this.matrixWorld.compose(translationWorld, quaternionObject, scaleWorld);
			} else {
				this.matrixWorld.copy(this.matrix);
			}
			this.matrixWorldNeedsUpdate = false;
			force = true;
		}
		// update children
		for (var i = 0, l = this.children.length; i < l; i++) {
			this.children[i].updateMatrixWorld(force);
		}
	};
}();
Gyroscope.prototype.isGyroscope = true;
exports.Gyroscope = Gyroscope;