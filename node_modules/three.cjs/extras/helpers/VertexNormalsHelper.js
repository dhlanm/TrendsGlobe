/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/
var Matrix3Module = require('../../math/Matrix3');
var Three = require('../../Three');
var LineBasicMaterialModule = require('../../materials/LineBasicMaterial');
var LineModule = require('../../objects/Line');
var Vector3Module = require('../../math/Vector3');
var GeometryModule = require('../../core/Geometry');
var VertexNormalsHelper;
VertexNormalsHelper = function (object, size, hex, linewidth) {
	this.object = object;
	this.size = size !== undefined ? size : 1;
	var color = hex !== undefined ? hex : 16711680;
	var width = linewidth !== undefined ? linewidth : 1;
	var geometry = new GeometryModule.Geometry();
	var faces = object.geometry.faces;
	for (var i = 0, l = faces.length; i < l; i++) {
		var face = faces[i];
		for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {
			geometry.vertices.push(new Vector3Module.Vector3(), new Vector3Module.Vector3());
		}
	}
	LineModule.Line.call(this, geometry, new LineBasicMaterialModule.LineBasicMaterial({
		color: color,
		linewidth: width
	}), Three.LinePieces);
	this.matrixAutoUpdate = false;
	this.normalMatrix = new Matrix3Module.Matrix3();
	this.update();
};
VertexNormalsHelper.prototype = Object.create(LineModule.Line.prototype);
VertexNormalsHelper.prototype.constructor = VertexNormalsHelper;
VertexNormalsHelper.prototype.update = function (object) {
	var v1 = new Vector3Module.Vector3();
	return function (object) {
		var keys = [
			'a',
			'b',
			'c',
			'd'
		];
		this.object.updateMatrixWorld(true);
		this.normalMatrix.getNormalMatrix(this.object.matrixWorld);
		var vertices = this.geometry.vertices;
		var verts = this.object.geometry.vertices;
		var faces = this.object.geometry.faces;
		var worldMatrix = this.object.matrixWorld;
		var idx = 0;
		for (var i = 0, l = faces.length; i < l; i++) {
			var face = faces[i];
			for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {
				var vertexId = face[keys[j]];
				var vertex = verts[vertexId];
				var normal = face.vertexNormals[j];
				vertices[idx].copy(vertex).applyMatrix4(worldMatrix);
				v1.copy(normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size);
				v1.add(vertices[idx]);
				idx = idx + 1;
				vertices[idx].copy(v1);
				idx = idx + 1;
			}
		}
		this.geometry.verticesNeedUpdate = true;
		return this;
	};
}();
VertexNormalsHelper.prototype.isVertexNormalsHelper = true;
exports.VertexNormalsHelper = VertexNormalsHelper;