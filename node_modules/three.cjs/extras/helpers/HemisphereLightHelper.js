/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */
var Vector3Module = require('../../math/Vector3');
var MeshModule = require('../../objects/Mesh');
var Three = require('../../Three');
var MeshBasicMaterialModule = require('../../materials/MeshBasicMaterial');
var Matrix4Module = require('../../math/Matrix4');
var SphereGeometryModule = require('../geometries/SphereGeometry');
var ColorModule = require('../../math/Color');
var Object3DModule = require('../../core/Object3D');
var HemisphereLightHelper;
HemisphereLightHelper = function (light, sphereSize) {
	Object3DModule.Object3D.call(this);
	this.light = light;
	this.light.updateMatrixWorld();
	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;
	this.colors = [
		new ColorModule.Color(),
		new ColorModule.Color()
	];
	var geometry = new SphereGeometryModule.SphereGeometry(sphereSize, 4, 2);
	geometry.applyMatrix(new Matrix4Module.Matrix4().makeRotationX(-Math.PI / 2));
	for (var i = 0, il = 8; i < il; i++) {
		geometry.faces[i].color = this.colors[i < 4 ? 0 : 1];
	}
	var material = new MeshBasicMaterialModule.MeshBasicMaterial({
		vertexColors: Three.FaceColors,
		wireframe: true
	});
	this.lightSphere = new MeshModule.Mesh(geometry, material);
	this.add(this.lightSphere);
	this.update();
};
HemisphereLightHelper.prototype = Object.create(Object3DModule.Object3D.prototype);
HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;
HemisphereLightHelper.prototype.dispose = function () {
	this.lightSphere.geometry.dispose();
	this.lightSphere.material.dispose();
};
HemisphereLightHelper.prototype.update = function () {
	var vector = new Vector3Module.Vector3();
	return function () {
		this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);
		this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);
		this.lightSphere.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate());
		this.lightSphere.geometry.colorsNeedUpdate = true;
	};
}();
HemisphereLightHelper.prototype.isHemisphereLightHelper = true;
exports.HemisphereLightHelper = HemisphereLightHelper;