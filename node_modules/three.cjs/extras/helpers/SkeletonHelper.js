/**
 * @author Sean Griffin / http://twitter.com/sgrif
 * @author Michael Guerrero / http://realitymeltdown.com
 * @author mrdoob / http://mrdoob.com/
 * @author ikerr / http://verold.com
 */
var Matrix4Module = require('../../math/Matrix4');
var LineModule = require('../../objects/Line');
var Three = require('../../Three');
var LineBasicMaterialModule = require('../../materials/LineBasicMaterial');
var ColorModule = require('../../math/Color');
var Vector3Module = require('../../math/Vector3');
var GeometryModule = require('../../core/Geometry');
var SkeletonHelper;
var instance;
SkeletonHelper = function (object) {
	this.bones = this.getBoneList(object);
	var geometry = new GeometryModule.Geometry();
	for (var i = 0; i < this.bones.length; i++) {
		var bone = this.bones[i];
		if (!!(instance = bone.parent) && !!instance.isBone) {
			geometry.vertices.push(new Vector3Module.Vector3());
			geometry.vertices.push(new Vector3Module.Vector3());
			geometry.colors.push(new ColorModule.Color(0, 0, 1));
			geometry.colors.push(new ColorModule.Color(0, 1, 0));
		}
	}
	var material = new LineBasicMaterialModule.LineBasicMaterial({
		vertexColors: Three.VertexColors,
		depthTest: false,
		depthWrite: false,
		transparent: true
	});
	LineModule.Line.call(this, geometry, material, Three.LinePieces);
	this.root = object;
	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;
	this.update();
};
SkeletonHelper.prototype = Object.create(LineModule.Line.prototype);
SkeletonHelper.prototype.constructor = SkeletonHelper;
SkeletonHelper.prototype.getBoneList = function (object) {
	var boneList = [];
	if (!!(instance = object) && !!instance.isBone) {
		boneList.push(object);
	}
	for (var i = 0; i < object.children.length; i++) {
		boneList.push.apply(boneList, this.getBoneList(object.children[i]));
	}
	return boneList;
};
SkeletonHelper.prototype.update = function () {
	var geometry = this.geometry;
	var matrixWorldInv = new Matrix4Module.Matrix4().getInverse(this.root.matrixWorld);
	var boneMatrix = new Matrix4Module.Matrix4();
	var j = 0;
	for (var i = 0; i < this.bones.length; i++) {
		var bone = this.bones[i];
		if (!!(instance = bone.parent) && !!instance.isBone) {
			boneMatrix.multiplyMatrices(matrixWorldInv, bone.matrixWorld);
			geometry.vertices[j].setFromMatrixPosition(boneMatrix);
			boneMatrix.multiplyMatrices(matrixWorldInv, bone.parent.matrixWorld);
			geometry.vertices[j + 1].setFromMatrixPosition(boneMatrix);
			j += 2;
		}
	}
	geometry.verticesNeedUpdate = true;
	geometry.computeBoundingSphere();
};
SkeletonHelper.prototype.isSkeletonHelper = true;
exports.SkeletonHelper = SkeletonHelper;