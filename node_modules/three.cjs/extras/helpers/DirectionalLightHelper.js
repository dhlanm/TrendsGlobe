/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */
var LineModule = require('../../objects/Line');
var LineBasicMaterialModule = require('../../materials/LineBasicMaterial');
var Vector3Module = require('../../math/Vector3');
var GeometryModule = require('../../core/Geometry');
var Object3DModule = require('../../core/Object3D');
var DirectionalLightHelper;
DirectionalLightHelper = function (light, size) {
	Object3DModule.Object3D.call(this);
	this.light = light;
	this.light.updateMatrixWorld();
	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;
	size = size || 1;
	var geometry = new GeometryModule.Geometry();
	geometry.vertices.push(new Vector3Module.Vector3(-size, size, 0), new Vector3Module.Vector3(size, size, 0), new Vector3Module.Vector3(size, -size, 0), new Vector3Module.Vector3(-size, -size, 0), new Vector3Module.Vector3(-size, size, 0));
	var material = new LineBasicMaterialModule.LineBasicMaterial({ fog: false });
	material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
	this.lightPlane = new LineModule.Line(geometry, material);
	this.add(this.lightPlane);
	geometry = new GeometryModule.Geometry();
	geometry.vertices.push(new Vector3Module.Vector3(), new Vector3Module.Vector3());
	material = new LineBasicMaterialModule.LineBasicMaterial({ fog: false });
	material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
	this.targetLine = new LineModule.Line(geometry, material);
	this.add(this.targetLine);
	this.update();
};
DirectionalLightHelper.prototype = Object.create(Object3DModule.Object3D.prototype);
DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;
DirectionalLightHelper.prototype.dispose = function () {
	this.lightPlane.geometry.dispose();
	this.lightPlane.material.dispose();
	this.targetLine.geometry.dispose();
	this.targetLine.material.dispose();
};
DirectionalLightHelper.prototype.update = function () {
	var v1 = new Vector3Module.Vector3();
	var v2 = new Vector3Module.Vector3();
	var v3 = new Vector3Module.Vector3();
	return function () {
		v1.setFromMatrixPosition(this.light.matrixWorld);
		v2.setFromMatrixPosition(this.light.target.matrixWorld);
		v3.subVectors(v2, v1);
		this.lightPlane.lookAt(v3);
		this.lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
		this.targetLine.geometry.vertices[1].copy(v3);
		this.targetLine.geometry.verticesNeedUpdate = true;
		this.targetLine.material.color.copy(this.lightPlane.material.color);
	};
}();
DirectionalLightHelper.prototype.isDirectionalLightHelper = true;
exports.DirectionalLightHelper = DirectionalLightHelper;