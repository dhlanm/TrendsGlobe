/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */
var MeshModule = require('../../objects/Mesh');
var MeshBasicMaterialModule = require('../../materials/MeshBasicMaterial');
var SphereGeometryModule = require('../geometries/SphereGeometry');
var PointLightHelper;
PointLightHelper = function (light, sphereSize) {
	this.light = light;
	this.light.updateMatrixWorld();
	var geometry = new SphereGeometryModule.SphereGeometry(sphereSize, 4, 2);
	var material = new MeshBasicMaterialModule.MeshBasicMaterial({
		wireframe: true,
		fog: false
	});
	material.color.copy(this.light.color).multiplyScalar(this.light.intensity);
	MeshModule.Mesh.call(this, geometry, material);
	this.matrix = this.light.matrixWorld;
	this.matrixAutoUpdate = false;	/*
	var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	var d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/
};
PointLightHelper.prototype = Object.create(MeshModule.Mesh.prototype);
PointLightHelper.prototype.constructor = PointLightHelper;
PointLightHelper.prototype.dispose = function () {
	this.geometry.dispose();
	this.material.dispose();
};
PointLightHelper.prototype.update = function () {
	this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);	/*
	var d = this.light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.visible = true;
		this.lightDistance.scale.set( d, d, d );

	}
	*/
};
PointLightHelper.prototype.isPointLightHelper = true;
exports.PointLightHelper = PointLightHelper;