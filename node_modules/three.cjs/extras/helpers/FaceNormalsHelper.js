/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/
var Matrix3Module = require('../../math/Matrix3');
var Three = require('../../Three');
var LineBasicMaterialModule = require('../../materials/LineBasicMaterial');
var LineModule = require('../../objects/Line');
var Vector3Module = require('../../math/Vector3');
var GeometryModule = require('../../core/Geometry');
var FaceNormalsHelper;
FaceNormalsHelper = function (object, size, hex, linewidth) {
	this.object = object;
	this.size = size !== undefined ? size : 1;
	var color = hex !== undefined ? hex : 16776960;
	var width = linewidth !== undefined ? linewidth : 1;
	var geometry = new GeometryModule.Geometry();
	var faces = this.object.geometry.faces;
	for (var i = 0, l = faces.length; i < l; i++) {
		geometry.vertices.push(new Vector3Module.Vector3(), new Vector3Module.Vector3());
	}
	LineModule.Line.call(this, geometry, new LineBasicMaterialModule.LineBasicMaterial({
		color: color,
		linewidth: width
	}), Three.LinePieces);
	this.matrixAutoUpdate = false;
	this.normalMatrix = new Matrix3Module.Matrix3();
	this.update();
};
FaceNormalsHelper.prototype = Object.create(LineModule.Line.prototype);
FaceNormalsHelper.prototype.constructor = FaceNormalsHelper;
FaceNormalsHelper.prototype.update = function () {
	var vertices = this.geometry.vertices;
	var object = this.object;
	var objectVertices = object.geometry.vertices;
	var objectFaces = object.geometry.faces;
	var objectWorldMatrix = object.matrixWorld;
	object.updateMatrixWorld(true);
	this.normalMatrix.getNormalMatrix(objectWorldMatrix);
	for (var i = 0, i2 = 0, l = objectFaces.length; i < l; i++, i2 += 2) {
		var face = objectFaces[i];
		vertices[i2].copy(objectVertices[face.a]).add(objectVertices[face.b]).add(objectVertices[face.c]).divideScalar(3).applyMatrix4(objectWorldMatrix);
		vertices[i2 + 1].copy(face.normal).applyMatrix3(this.normalMatrix).normalize().multiplyScalar(this.size).add(vertices[i2]);
	}
	this.geometry.verticesNeedUpdate = true;
	return this;
};
FaceNormalsHelper.prototype.isFaceNormalsHelper = true;
exports.FaceNormalsHelper = FaceNormalsHelper;