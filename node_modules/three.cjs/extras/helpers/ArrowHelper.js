/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / http://github.com/zz85
 * @author bhouston / http://exocortex.com
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  color - color in hex value
 *  headLength - Number
 *  headWidth - Number
 */
var MeshBasicMaterialModule = require('../../materials/MeshBasicMaterial');
var MeshModule = require('../../objects/Mesh');
var LineBasicMaterialModule = require('../../materials/LineBasicMaterial');
var LineModule = require('../../objects/Line');
var Object3DModule = require('../../core/Object3D');
var Matrix4Module = require('../../math/Matrix4');
var CylinderGeometryModule = require('../geometries/CylinderGeometry');
var Vector3Module = require('../../math/Vector3');
var GeometryModule = require('../../core/Geometry');
exports.ArrowHelper = function () {
	var lineGeometry = new GeometryModule.Geometry();
	lineGeometry.vertices.push(new Vector3Module.Vector3(0, 0, 0), new Vector3Module.Vector3(0, 1, 0));
	var coneGeometry = new CylinderGeometryModule.CylinderGeometry(0, 0.5, 1, 5, 1);
	coneGeometry.applyMatrix(new Matrix4Module.Matrix4().makeTranslation(0, -0.5, 0));
	return function (dir, origin, length, color, headLength, headWidth) {
		// dir is assumed to be normalized
		Object3DModule.Object3D.call(this);
		if (color === undefined)
			color = 16776960;
		if (length === undefined)
			length = 1;
		if (headLength === undefined)
			headLength = 0.2 * length;
		if (headWidth === undefined)
			headWidth = 0.2 * headLength;
		this.position.copy(origin);
		this.line = new LineModule.Line(lineGeometry, new LineBasicMaterialModule.LineBasicMaterial({ color: color }));
		this.line.matrixAutoUpdate = false;
		this.add(this.line);
		this.cone = new MeshModule.Mesh(coneGeometry, new MeshBasicMaterialModule.MeshBasicMaterial({ color: color }));
		this.cone.matrixAutoUpdate = false;
		this.add(this.cone);
		this.setDirection(dir);
		this.setLength(length, headLength, headWidth);
	};
}();
exports.ArrowHelper.prototype = Object.create(Object3DModule.Object3D.prototype);
exports.ArrowHelper.prototype.constructor = exports.ArrowHelper;
exports.ArrowHelper.prototype.setDirection = function () {
	var axis = new Vector3Module.Vector3();
	var radians;
	return function (dir) {
		// dir is assumed to be normalized
		if (dir.y > 0.99999) {
			this.quaternion.set(0, 0, 0, 1);
		} else if (dir.y < -0.99999) {
			this.quaternion.set(1, 0, 0, 0);
		} else {
			axis.set(dir.z, 0, -dir.x).normalize();
			radians = Math.acos(dir.y);
			this.quaternion.setFromAxisAngle(axis, radians);
		}
	};
}();
exports.ArrowHelper.prototype.setLength = function (length, headLength, headWidth) {
	if (headLength === undefined)
		headLength = 0.2 * length;
	if (headWidth === undefined)
		headWidth = 0.2 * headLength;
	this.line.scale.set(1, length - headLength, 1);
	this.line.updateMatrix();
	this.cone.scale.set(headWidth, headLength, headWidth);
	this.cone.position.y = length;
	this.cone.updateMatrix();
};
exports.ArrowHelper.prototype.setColor = function (color) {
	this.line.material.color.set(color);
	this.cone.material.color.set(color);
};
if (typeof exports.ArrowHelper === 'function')
	exports.ArrowHelper.prototype.isArrowHelper = true;