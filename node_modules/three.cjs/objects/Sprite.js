/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */
var Vector3Module = require('../math/Vector3');
var SpriteMaterialModule = require('../materials/SpriteMaterial');
var Object3DModule = require('../core/Object3D');
var BufferAttributeModule = require('../core/BufferAttribute');
var BufferGeometryModule = require('../core/BufferGeometry');
exports.Sprite = function () {
	var indices = new Uint16Array([
		0,
		1,
		2,
		0,
		2,
		3
	]);
	var vertices = new Float32Array([
		-0.5,
		-0.5,
		0,
		0.5,
		-0.5,
		0,
		0.5,
		0.5,
		0,
		-0.5,
		0.5,
		0
	]);
	var uvs = new Float32Array([
		0,
		0,
		1,
		0,
		1,
		1,
		0,
		1
	]);
	var geometry = new BufferGeometryModule.BufferGeometry();
	geometry.addAttribute('index', new BufferAttributeModule.BufferAttribute(indices, 1));
	geometry.addAttribute('position', new BufferAttributeModule.BufferAttribute(vertices, 3));
	geometry.addAttribute('uv', new BufferAttributeModule.BufferAttribute(uvs, 2));
	return function (material) {
		Object3DModule.Object3D.call(this);
		this.type = 'Sprite';
		this.geometry = geometry;
		this.material = material !== undefined ? material : new SpriteMaterialModule.SpriteMaterial();
	};
}();
exports.Sprite.prototype = Object.create(Object3DModule.Object3D.prototype);
exports.Sprite.prototype.constructor = exports.Sprite;
exports.Sprite.prototype.raycast = function () {
	var matrixPosition = new Vector3Module.Vector3();
	return function (raycaster, intersects) {
		matrixPosition.setFromMatrixPosition(this.matrixWorld);
		var distance = raycaster.ray.distanceToPoint(matrixPosition);
		if (distance > this.scale.x) {
			return;
		}
		intersects.push({
			distance: distance,
			point: this.position,
			face: null,
			object: this
		});
	};
}();
exports.Sprite.prototype.clone = function (object) {
	if (object === undefined)
		object = new exports.Sprite(this.material);
	Object3DModule.Object3D.prototype.clone.call(this, object);
	return object;
};
// Backwards compatibility
exports.Particle = exports.Sprite;
if (typeof exports.Sprite === 'function')
	exports.Sprite.prototype.isSprite = true;
if (typeof exports.Particle === 'function')
	exports.Particle.prototype.isParticle = true;