/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *  sizeAttenuation: <bool>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  vertexColors: <bool>,
 *
 *  fog: <bool>
 * }
 */
var Three = require('../Three');
var ColorModule = require('../math/Color');
var MaterialModule = require('./Material');
var ParticleSystemMaterial;
var ParticleBasicMaterial;
var PointCloudMaterial;
PointCloudMaterial = function (parameters) {
	MaterialModule.Material.call(this);
	this.type = 'PointCloudMaterial';
	this.color = new ColorModule.Color(16777215);
	this.map = null;
	this.size = 1;
	this.sizeAttenuation = true;
	this.vertexColors = Three.NoColors;
	this.fog = true;
	this.setValues(parameters);
};
PointCloudMaterial.prototype = Object.create(MaterialModule.Material.prototype);
PointCloudMaterial.prototype.constructor = PointCloudMaterial;
PointCloudMaterial.prototype.clone = function () {
	var material = new PointCloudMaterial();
	MaterialModule.Material.prototype.clone.call(this, material);
	material.color.copy(this.color);
	material.map = this.map;
	material.size = this.size;
	material.sizeAttenuation = this.sizeAttenuation;
	material.vertexColors = this.vertexColors;
	material.fog = this.fog;
	return material;
};
// backwards compatibility
ParticleBasicMaterial = function (parameters) {
	Three.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.');
	return new PointCloudMaterial(parameters);
};
ParticleSystemMaterial = function (parameters) {
	Three.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.');
	return new PointCloudMaterial(parameters);
};
PointCloudMaterial.prototype.isPointCloudMaterial = true;
exports.PointCloudMaterial = PointCloudMaterial;
ParticleBasicMaterial.prototype.isParticleBasicMaterial = true;
exports.ParticleBasicMaterial = ParticleBasicMaterial;
ParticleSystemMaterial.prototype.isParticleSystemMaterial = true;
exports.ParticleSystemMaterial = ParticleSystemMaterial;