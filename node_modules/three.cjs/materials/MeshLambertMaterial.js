/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  emissive: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */
var Three = require('../Three');
var Vector3Module = require('../math/Vector3');
var ColorModule = require('../math/Color');
var MaterialModule = require('./Material');
var MeshLambertMaterial;
MeshLambertMaterial = function (parameters) {
	MaterialModule.Material.call(this);
	this.type = 'MeshLambertMaterial';
	this.color = new ColorModule.Color(16777215);
	// diffuse
	this.emissive = new ColorModule.Color(0);
	this.wrapAround = false;
	this.wrapRGB = new Vector3Module.Vector3(1, 1, 1);
	this.map = null;
	this.lightMap = null;
	this.specularMap = null;
	this.alphaMap = null;
	this.envMap = null;
	this.combine = Three.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;
	this.fog = true;
	this.shading = Three.SmoothShading;
	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';
	this.vertexColors = Three.NoColors;
	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;
	this.setValues(parameters);
};
MeshLambertMaterial.prototype = Object.create(MaterialModule.Material.prototype);
MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
MeshLambertMaterial.prototype.clone = function () {
	var material = new MeshLambertMaterial();
	MaterialModule.Material.prototype.clone.call(this, material);
	material.color.copy(this.color);
	material.emissive.copy(this.emissive);
	material.wrapAround = this.wrapAround;
	material.wrapRGB.copy(this.wrapRGB);
	material.map = this.map;
	material.lightMap = this.lightMap;
	material.specularMap = this.specularMap;
	material.alphaMap = this.alphaMap;
	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;
	material.fog = this.fog;
	material.shading = this.shading;
	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;
	material.vertexColors = this.vertexColors;
	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;
	return material;
};
MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
exports.MeshLambertMaterial = MeshLambertMaterial;