/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 */
var EventDispatcherModule = require('../core/EventDispatcher');
var Vector2Module = require('../math/Vector2');
var Three = require('../Three');
var WebGLRenderTarget;
WebGLRenderTarget = function (width, height, options) {
	this.width = width;
	this.height = height;
	options = options || {};
	this.wrapS = options.wrapS !== undefined ? options.wrapS : Three.ClampToEdgeWrapping;
	this.wrapT = options.wrapT !== undefined ? options.wrapT : Three.ClampToEdgeWrapping;
	this.magFilter = options.magFilter !== undefined ? options.magFilter : Three.LinearFilter;
	this.minFilter = options.minFilter !== undefined ? options.minFilter : Three.LinearMipMapLinearFilter;
	this.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;
	this.offset = new Vector2Module.Vector2(0, 0);
	this.repeat = new Vector2Module.Vector2(1, 1);
	this.format = options.format !== undefined ? options.format : Three.RGBAFormat;
	this.type = options.type !== undefined ? options.type : Three.UnsignedByteType;
	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
	this.generateMipmaps = true;
	this.shareDepthFrom = options.shareDepthFrom !== undefined ? options.shareDepthFrom : null;
};
WebGLRenderTarget.prototype = {
	constructor: WebGLRenderTarget,
	setSize: function (width, height) {
		this.width = width;
		this.height = height;
	},
	clone: function () {
		var tmp = new WebGLRenderTarget(this.width, this.height);
		tmp.wrapS = this.wrapS;
		tmp.wrapT = this.wrapT;
		tmp.magFilter = this.magFilter;
		tmp.minFilter = this.minFilter;
		tmp.anisotropy = this.anisotropy;
		tmp.offset.copy(this.offset);
		tmp.repeat.copy(this.repeat);
		tmp.format = this.format;
		tmp.type = this.type;
		tmp.depthBuffer = this.depthBuffer;
		tmp.stencilBuffer = this.stencilBuffer;
		tmp.generateMipmaps = this.generateMipmaps;
		tmp.shareDepthFrom = this.shareDepthFrom;
		return tmp;
	},
	dispose: function () {
		this.dispatchEvent({ type: 'dispose' });
	}
};
EventDispatcherModule.EventDispatcher.prototype.apply(WebGLRenderTarget.prototype);
WebGLRenderTarget.prototype.isWebGLRenderTarget = true;
exports.WebGLRenderTarget = WebGLRenderTarget;