var ShaderChunk;
ShaderChunk = {
	'alphamap_pars_fragment': '#ifdef USE_ALPHAMAP\r\n\r\n\tuniform sampler2D alphaMap;\r\n\r\n#endif\r\n',
	'bumpmap_pars_fragment': '#ifdef USE_BUMPMAP\r\n\r\n\tuniform sampler2D bumpMap;\r\n\tuniform float bumpScale;\r\n\r\n\t// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\r\n\t// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\r\n\r\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n\tvec2 dHdxy_fwd() {\r\n\r\n\t\tvec2 dSTdx = dFdx( vUv );\r\n\t\tvec2 dSTdy = dFdy( vUv );\r\n\r\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\r\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\r\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\r\n\r\n\t\treturn vec2( dBx, dBy );\r\n\r\n\t}\r\n\r\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\r\n\r\n\t\tvec3 vSigmaX = dFdx( surf_pos );\r\n\t\tvec3 vSigmaY = dFdy( surf_pos );\r\n\t\tvec3 vN = surf_norm;\t\t// normalized\r\n\r\n\t\tvec3 R1 = cross( vSigmaY, vN );\r\n\t\tvec3 R2 = cross( vN, vSigmaX );\r\n\r\n\t\tfloat fDet = dot( vSigmaX, R1 );\r\n\r\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\r\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\r\n\r\n\t}\r\n\r\n#endif\r\n',
	'alphamap_fragment': '#ifdef USE_ALPHAMAP\r\n\r\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\r\n\r\n#endif\r\n',
	'alphatest_fragment': '#ifdef ALPHATEST\r\n\r\n\tif ( diffuseColor.a < ALPHATEST ) discard;\r\n\r\n#endif\r\n',
	'color_pars_fragment': '#ifdef USE_COLOR\r\n\r\n\tvarying vec3 vColor;\r\n\r\n#endif\r\n',
	'color_fragment': '#ifdef USE_COLOR\r\n\r\n\tdiffuseColor.rgb *= vColor;\r\n\r\n#endif',
	'color_pars_vertex': '#ifdef USE_COLOR\r\n\r\n\tvarying vec3 vColor;\r\n\r\n#endif',
	'color_vertex': '#ifdef USE_COLOR\r\n\r\n\tvColor.xyz = inputToLinear( color.xyz );\r\n\r\n#endif',
	'common': '#define PI 3.14159\r\n#define PI2 6.28318\r\n#define RECIPROCAL_PI2 0.15915494\r\n#define LOG2 1.442695\r\n#define EPSILON 1e-6\r\n\r\nfloat square( in float a ) { return a*a; }\r\nvec2  square( in vec2 a )  { return vec2( a.x*a.x, a.y*a.y ); }\r\nvec3  square( in vec3 a )  { return vec3( a.x*a.x, a.y*a.y, a.z*a.z ); }\r\nvec4  square( in vec4 a )  { return vec4( a.x*a.x, a.y*a.y, a.z*a.z, a.w*a.w ); }\r\nfloat saturate( in float a ) { return clamp( a, 0.0, 1.0 ); }\r\nvec2  saturate( in vec2 a )  { return clamp( a, 0.0, 1.0 ); }\r\nvec3  saturate( in vec3 a )  { return clamp( a, 0.0, 1.0 ); }\r\nvec4  saturate( in vec4 a )  { return clamp( a, 0.0, 1.0 ); }\r\nfloat average( in float a ) { return a; }\r\nfloat average( in vec2 a )  { return ( a.x + a.y) * 0.5; }\r\nfloat average( in vec3 a )  { return ( a.x + a.y + a.z) / 3.0; }\r\nfloat average( in vec4 a )  { return ( a.x + a.y + a.z + a.w) * 0.25; }\r\nfloat whiteCompliment( in float a ) { return saturate( 1.0 - a ); }\r\nvec2  whiteCompliment( in vec2 a )  { return saturate( vec2(1.0) - a ); }\r\nvec3  whiteCompliment( in vec3 a )  { return saturate( vec3(1.0) - a ); }\r\nvec4  whiteCompliment( in vec4 a )  { return saturate( vec4(1.0) - a ); }\r\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\r\n\treturn normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\r\n}\r\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\r\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\r\n\treturn normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\r\n}\r\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal) {\r\n\tfloat distance = dot( planeNormal, point-pointOnPlane );\r\n\treturn point - distance * planeNormal;\r\n}\r\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\r\n}\r\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\treturn pointOnLine + lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) );\r\n}\r\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\r\n\tif ( decayExponent > 0.0 ) {\r\n\t  return pow( saturate( 1.0 - lightDistance / cutoffDistance ), decayExponent );\r\n\t}\r\n\treturn 1.0;\r\n}\r\n\r\nvec3 inputToLinear( in vec3 a ) {\r\n#ifdef GAMMA_INPUT\r\n\treturn pow( a, vec3( float( GAMMA_FACTOR ) ) );\r\n#else\r\n\treturn a;\r\n#endif\r\n}\r\nvec3 linearToOutput( in vec3 a ) {\r\n#ifdef GAMMA_OUTPUT\r\n\treturn pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\r\n#else\r\n\treturn a;\r\n#endif\r\n}\r\n',
	'defaultnormal_vertex': '#ifdef USE_SKINNING\r\n\r\n\tvec3 objectNormal = skinnedNormal.xyz;\r\n\r\n#elif defined( USE_MORPHNORMALS )\r\n\r\n\tvec3 objectNormal = morphedNormal;\r\n\r\n#else\r\n\r\n\tvec3 objectNormal = normal;\r\n\r\n#endif\r\n\r\n#ifdef FLIP_SIDED\r\n\r\n\tobjectNormal = -objectNormal;\r\n\r\n#endif\r\n\r\nvec3 transformedNormal = normalMatrix * objectNormal;\r\n',
	'default_vertex': '#ifdef USE_SKINNING\r\n\r\n\tvec4 mvPosition = modelViewMatrix * skinned;\r\n\r\n#elif defined( USE_MORPHTARGETS )\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\r\n\r\n#else\r\n\r\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n#endif\r\n\r\ngl_Position = projectionMatrix * mvPosition;\r\n',
	'envmap_fragment': '#ifdef USE_ENVMAP\r\n\r\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n\r\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\r\n\r\n\t\t// Transforming Normal Vectors with the Inverse Transformation\r\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n\t\t#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\r\n\r\n\t\t#else\r\n\r\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n\t\t#endif\r\n\r\n\t#else\r\n\r\n\t\tvec3 reflectVec = vReflect;\r\n\r\n\t#endif\r\n\r\n\t#ifdef DOUBLE_SIDED\r\n\t\tfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\r\n\t#else\r\n\t\tfloat flipNormal = 1.0;\r\n\t#endif\r\n\r\n\t#ifdef ENVMAP_TYPE_CUBE\r\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\r\n\r\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\r\n\t\tvec2 sampleUV;\r\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\r\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\r\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\r\n\r\n\t#elif defined( ENVMAP_TYPE_SPHERE )\r\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\r\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\r\n\t#endif\r\n\r\n\tenvColor.xyz = inputToLinear( envColor.xyz );\r\n\r\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\r\n\r\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\r\n\r\n\t#elif defined( ENVMAP_BLENDING_MIX )\r\n\r\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\r\n\r\n\t#elif defined( ENVMAP_BLENDING_ADD )\r\n\r\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\r\n\r\n\t#endif\r\n\r\n#endif\r\n',
	'envmap_pars_fragment': '#ifdef USE_ENVMAP\r\n\r\n\tuniform float reflectivity;\r\n\t#ifdef ENVMAP_TYPE_CUBE\r\n\t\tuniform samplerCube envMap;\r\n\t#else\r\n\t\tuniform sampler2D envMap;\r\n\t#endif\r\n\tuniform float flipEnvMap;\r\n\r\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n\r\n\t\tuniform float refractionRatio;\r\n\r\n\t#else\r\n\r\n\t\tvarying vec3 vReflect;\r\n\r\n\t#endif\r\n\r\n#endif\r\n',
	'envmap_pars_vertex': '#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\r\n\r\n\tvarying vec3 vReflect;\r\n\r\n\tuniform float refractionRatio;\r\n\r\n#endif\r\n',
	'envmap_vertex': '#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\r\n\r\n\tvec3 worldNormal = transformDirection( objectNormal, modelMatrix );\r\n\r\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\r\n\r\n\t#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\r\n\r\n\t#else\r\n\r\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n\t#endif\r\n\r\n#endif\r\n',
	'fog_fragment': '#ifdef USE_FOG\r\n\r\n\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\r\n\r\n\t#else\r\n\r\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\r\n\t#endif\r\n\r\n\t#ifdef FOG_EXP2\r\n\r\n\t\tfloat fogFactor = exp2( - square( fogDensity ) * square( depth ) * LOG2 );\r\n\t\tfogFactor = whiteCompliment( fogFactor );\r\n\r\n\t#else\r\n\r\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\r\n\r\n\t#endif\r\n\t\r\n\toutgoingLight = mix( outgoingLight, fogColor, fogFactor );\r\n\r\n#endif',
	'fog_pars_fragment': '#ifdef USE_FOG\r\n\r\n\tuniform vec3 fogColor;\r\n\r\n\t#ifdef FOG_EXP2\r\n\r\n\t\tuniform float fogDensity;\r\n\r\n\t#else\r\n\r\n\t\tuniform float fogNear;\r\n\t\tuniform float fogFar;\r\n\t#endif\r\n\r\n#endif',
	'lightmap_fragment': '#ifdef USE_LIGHTMAP\r\n\r\n\toutgoingLight *= diffuseColor.xyz * texture2D( lightMap, vUv2 ).xyz;\r\n\r\n#endif',
	'lightmap_pars_fragment': '#ifdef USE_LIGHTMAP\r\n\r\n\tvarying vec2 vUv2;\r\n\tuniform sampler2D lightMap;\r\n\r\n#endif',
	'lightmap_vertex': '#ifdef USE_LIGHTMAP\r\n\r\n\tvUv2 = uv2;\r\n\r\n#endif',
	'lightmap_pars_vertex': '#ifdef USE_LIGHTMAP\r\n\r\n\tvarying vec2 vUv2;\r\n\r\n#endif',
	'lights_lambert_pars_vertex': 'uniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0\r\n\r\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\r\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\r\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\r\n\r\n#endif\r\n\r\n#ifdef WRAP_AROUND\r\n\r\n\tuniform vec3 wrapRGB;\r\n\r\n#endif\r\n',
	'lights_lambert_vertex': 'vLightFront = vec3( 0.0 );\r\n\r\n#ifdef DOUBLE_SIDED\r\n\r\n\tvLightBack = vec3( 0.0 );\r\n\r\n#endif\r\n\r\ntransformedNormal = normalize( transformedNormal );\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\r\n\r\n\tvec3 dirVector = transformDirection( directionalLightDirection[ i ], viewMatrix );\r\n\r\n\tfloat dotProduct = dot( transformedNormal, dirVector );\r\n\tvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\r\n\r\n\t#ifdef DOUBLE_SIDED\r\n\r\n\t\tvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\r\n\r\n\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\tvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\r\n\r\n\t\t#endif\r\n\r\n\t#endif\r\n\r\n\t#ifdef WRAP_AROUND\r\n\r\n\t\tvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\r\n\t\tdirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\r\n\r\n\t\t#ifdef DOUBLE_SIDED\r\n\r\n\t\t\tdirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\r\n\r\n\t\t#endif\r\n\r\n\t#endif\r\n\r\n\tvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\r\n\r\n\t#ifdef DOUBLE_SIDED\r\n\r\n\t\tvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\r\n\r\n\t#endif\r\n\r\n}\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\r\n\r\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\r\n\r\n\t\tlVector = normalize( lVector );\r\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\r\n\r\n\t\tvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\r\n\r\n\t\t#ifdef DOUBLE_SIDED\r\n\r\n\t\t\tvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\r\n\r\n\t\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\t\tvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t#endif\r\n\r\n\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\tvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\r\n\t\t\tpointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\r\n\r\n\t\t\t#ifdef DOUBLE_SIDED\r\n\r\n\t\t\t\tpointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t#endif\r\n\r\n\t\tvLightFront += pointLightColor[ i ] * pointLightWeighting * attenuation;\r\n\r\n\t\t#ifdef DOUBLE_SIDED\r\n\r\n\t\t\tvLightBack += pointLightColor[ i ] * pointLightWeightingBack * attenuation;\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0\r\n\r\n\tfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\r\n\r\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\r\n\t\tvec3 lVector = lPosition.xyz - mvPosition.xyz;\r\n\r\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\r\n\r\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\r\n\r\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\r\n\r\n\t\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\r\n\r\n\t\t\tlVector = normalize( lVector );\r\n\r\n\t\t\tfloat dotProduct = dot( transformedNormal, lVector );\r\n\t\t\tvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\r\n\r\n\t\t\t#ifdef DOUBLE_SIDED\r\n\r\n\t\t\t\tvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\r\n\r\n\t\t\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\t\t\tvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\t\tvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\r\n\t\t\t\tspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\r\n\r\n\t\t\t\t#ifdef DOUBLE_SIDED\r\n\r\n\t\t\t\t\tspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\r\n\r\n\t\t\t\t#endif\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\tvLightFront += spotLightColor[ i ] * spotLightWeighting * attenuation * spotEffect;\r\n\r\n\t\t\t#ifdef DOUBLE_SIDED\r\n\r\n\t\t\t\tvLightBack += spotLightColor[ i ] * spotLightWeightingBack * attenuation * spotEffect;\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\tvec3 lVector = transformDirection( hemisphereLightDirection[ i ], viewMatrix );\r\n\r\n\t\tfloat dotProduct = dot( transformedNormal, lVector );\r\n\r\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\t\tfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\r\n\r\n\t\tvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\t#ifdef DOUBLE_SIDED\r\n\r\n\t\t\tvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n#endif\r\n\r\nvLightFront += ambientLightColor;\r\n\r\n#ifdef DOUBLE_SIDED\r\n\r\n\tvLightBack += ambientLightColor;\r\n\r\n#endif\r\n',
	'lights_phong_fragment': '#ifndef FLAT_SHADED\r\n\r\n\tvec3 normal = normalize( vNormal );\r\n\r\n\t#ifdef DOUBLE_SIDED\r\n\r\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\r\n\r\n\t#endif\r\n\r\n#else\r\n\r\n\tvec3 fdx = dFdx( vViewPosition );\r\n\tvec3 fdy = dFdy( vViewPosition );\r\n\tvec3 normal = normalize( cross( fdx, fdy ) );\r\n\r\n#endif\r\n\r\nvec3 viewPosition = normalize( vViewPosition );\r\n\r\n#ifdef USE_NORMALMAP\r\n\r\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\r\n\r\n#elif defined( USE_BUMPMAP )\r\n\r\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n#endif\r\n\r\nvec3 totalDiffuseLight = vec3( 0.0 );\r\nvec3 totalSpecularLight = vec3( 0.0 );\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\r\n\r\n\t\tvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\r\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\r\n\r\n\t\tlVector = normalize( lVector );\r\n\r\n\t\t// diffuse\r\n\r\n\t\tfloat dotProduct = dot( normal, lVector );\r\n\r\n\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\tfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\r\n\t\t\tfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\r\n\r\n\t\t\tvec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\r\n\r\n\t\t#else\r\n\r\n\t\t\tfloat pointDiffuseWeight = max( dotProduct, 0.0 );\r\n\r\n\t\t#endif\r\n\r\n\t\ttotalDiffuseLight += pointLightColor[ i ] * pointDiffuseWeight * attenuation;\r\n\r\n\t\t\t\t// specular\r\n\r\n\t\tvec3 pointHalfVector = normalize( lVector + viewPosition );\r\n\t\tfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\r\n\t\tfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\r\n\r\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\r\n\t\ttotalSpecularLight += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * attenuation * specularNormalization;\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0\r\n\r\n\tfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\r\n\r\n\t\tvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\r\n\t\tvec3 lVector = lPosition.xyz + vViewPosition.xyz;\r\n\r\n\t\tfloat attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\r\n\r\n\t\tlVector = normalize( lVector );\r\n\r\n\t\tfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\r\n\r\n\t\tif ( spotEffect > spotLightAngleCos[ i ] ) {\r\n\r\n\t\t\tspotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\r\n\r\n\t\t\t// diffuse\r\n\r\n\t\t\tfloat dotProduct = dot( normal, lVector );\r\n\r\n\t\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\t\tfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\r\n\t\t\t\tfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\r\n\r\n\t\t\t\tvec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\tfloat spotDiffuseWeight = max( dotProduct, 0.0 );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\ttotalDiffuseLight += spotLightColor[ i ] * spotDiffuseWeight * attenuation * spotEffect;\r\n\r\n\t\t\t// specular\r\n\r\n\t\t\tvec3 spotHalfVector = normalize( lVector + viewPosition );\r\n\t\t\tfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\r\n\t\t\tfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\r\n\r\n\t\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\r\n\t\t\ttotalSpecularLight += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * attenuation * specularNormalization * spotEffect;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\r\n\r\n\t\tvec3 dirVector = transformDirection( directionalLightDirection[ i ], viewMatrix );\r\n\r\n\t\t// diffuse\r\n\r\n\t\tfloat dotProduct = dot( normal, dirVector );\r\n\r\n\t\t#ifdef WRAP_AROUND\r\n\r\n\t\t\tfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\r\n\t\t\tfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\r\n\r\n\t\t\tvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\r\n\r\n\t\t#else\r\n\r\n\t\t\tfloat dirDiffuseWeight = max( dotProduct, 0.0 );\r\n\r\n\t\t#endif\r\n\r\n\t\ttotalDiffuseLight += directionalLightColor[ i ] * dirDiffuseWeight;\r\n\r\n\t\t// specular\r\n\r\n\t\tvec3 dirHalfVector = normalize( dirVector + viewPosition );\r\n\t\tfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\r\n\t\tfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\r\n\r\n\t\t/*\r\n\t\t// fresnel term from skin shader\r\n\t\tconst float F0 = 0.128;\r\n\r\n\t\tfloat base = 1.0 - dot( viewPosition, dirHalfVector );\r\n\t\tfloat exponential = pow( base, 5.0 );\r\n\r\n\t\tfloat fresnel = exponential + F0 * ( 1.0 - exponential );\r\n\t\t*/\r\n\r\n\t\t/*\r\n\t\t// fresnel term from fresnel shader\r\n\t\tconst float mFresnelBias = 0.08;\r\n\t\tconst float mFresnelScale = 0.3;\r\n\t\tconst float mFresnelPower = 5.0;\r\n\r\n\t\tfloat fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\r\n\t\t*/\r\n\r\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\r\n\r\n\t\t// \t\tdirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\r\n\r\n\t\tvec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\r\n\t\ttotalSpecularLight += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\r\n\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\r\n\r\n\t\tvec3 lVector = transformDirection( hemisphereLightDirection[ i ], viewMatrix );\r\n\r\n\t\t// diffuse\r\n\r\n\t\tfloat dotProduct = dot( normal, lVector );\r\n\t\tfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\r\n\r\n\t\tvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\r\n\r\n\t\ttotalDiffuseLight += hemiColor;\r\n\r\n\t\t// specular (sky light)\r\n\r\n\t\tvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\r\n\t\tfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\r\n\t\tfloat hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\r\n\r\n\t\t// specular (ground light)\r\n\r\n\t\tvec3 lVectorGround = -lVector;\r\n\r\n\t\tvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\r\n\t\tfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\r\n\t\tfloat hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\r\n\r\n\t\tfloat dotProductGround = dot( normal, lVectorGround );\r\n\r\n\t\tfloat specularNormalization = ( shininess + 2.0 ) / 8.0;\r\n\r\n\t\tvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\r\n\t\tvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\r\n\t\ttotalSpecularLight += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\r\n\r\n\t}\r\n\r\n#endif\r\n\r\n#ifdef METAL\r\n\r\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + ambientLightColor ) * specular + totalSpecularLight + emissive;\r\n\r\n#else\r\n\r\n\toutgoingLight += diffuseColor.rgb * ( totalDiffuseLight + ambientLightColor ) + totalSpecularLight + emissive;\r\n\r\n#endif\r\n',
	'lights_phong_pars_fragment': 'uniform vec3 ambientLightColor;\r\n\r\n#if MAX_DIR_LIGHTS > 0\r\n\r\n\tuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\r\n\tuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_HEMI_LIGHTS > 0\r\n\r\n\tuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\r\n\tuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_POINT_LIGHTS > 0\r\n\r\n\tuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\r\n\r\n\tuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\r\n\tuniform float pointLightDecay[ MAX_POINT_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0\r\n\r\n\tuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\r\n\tuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\r\n\tuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\r\n\tuniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\r\n\r\n#endif\r\n\r\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\r\n\r\n\tvarying vec3 vWorldPosition;\r\n\r\n#endif\r\n\r\n#ifdef WRAP_AROUND\r\n\r\n\tuniform vec3 wrapRGB;\r\n\r\n#endif\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n\tvarying vec3 vNormal;\r\n\r\n#endif\r\n',
	'lights_phong_pars_vertex': '#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\r\n\r\n\tvarying vec3 vWorldPosition;\r\n\r\n#endif\r\n',
	'lights_phong_vertex': '#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\r\n\r\n\tvWorldPosition = worldPosition.xyz;\r\n\r\n#endif',
	'linear_to_gamma_fragment': '\r\n\toutgoingLight = linearToOutput( outgoingLight );\r\n',
	'logdepthbuf_fragment': '#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\r\n\r\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\r\n\r\n#endif',
	'logdepthbuf_pars_fragment': '#ifdef USE_LOGDEPTHBUF\r\n\r\n\tuniform float logDepthBufFC;\r\n\r\n\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n\t\t#extension GL_EXT_frag_depth : enable\r\n\t\tvarying float vFragDepth;\r\n\r\n\t#endif\r\n\r\n#endif',
	'logdepthbuf_pars_vertex': '#ifdef USE_LOGDEPTHBUF\r\n\r\n\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n\t\tvarying float vFragDepth;\r\n\r\n\t#endif\r\n\r\n\tuniform float logDepthBufFC;\r\n\r\n#endif',
	'logdepthbuf_vertex': '#ifdef USE_LOGDEPTHBUF\r\n\r\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\r\n\r\n\t#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n\t\tvFragDepth = 1.0 + gl_Position.w;\r\n\r\n#else\r\n\r\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\r\n\r\n\t#endif\r\n\r\n#endif',
	'map_fragment': '#ifdef USE_MAP\r\n\r\n\tvec4 texelColor = texture2D( map, vUv );\r\n\r\n\ttexelColor.xyz = inputToLinear( texelColor.xyz );\r\n\r\n\tdiffuseColor *= texelColor;\r\n\r\n#endif',
	'map_pars_fragment': '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\r\n\r\n\tvarying vec2 vUv;\r\n\r\n#endif\r\n\r\n#ifdef USE_MAP\r\n\r\n\tuniform sampler2D map;\r\n\r\n#endif',
	'map_pars_vertex': '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\r\n\r\n\tvarying vec2 vUv;\r\n\tuniform vec4 offsetRepeat;\r\n\r\n#endif\r\n',
	'map_particle_fragment': '#ifdef USE_MAP\r\n\r\n\tdiffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\r\n\r\n#endif\r\n',
	'map_vertex': '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\r\n\r\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n#endif',
	'map_particle_pars_fragment': '#ifdef USE_MAP\r\n\r\n\tuniform vec4 offsetRepeat;\r\n\tuniform sampler2D map;\r\n\r\n#endif\r\n',
	'morphnormal_vertex': '#ifdef USE_MORPHNORMALS\r\n\r\n\tvec3 morphedNormal = vec3( 0.0 );\r\n\r\n\tmorphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\r\n\tmorphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\r\n\tmorphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\r\n\tmorphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\r\n\r\n\tmorphedNormal += normal;\r\n\r\n#endif',
	'morphtarget_pars_vertex': '#ifdef USE_MORPHTARGETS\r\n\r\n\t#ifndef USE_MORPHNORMALS\r\n\r\n\tuniform float morphTargetInfluences[ 8 ];\r\n\r\n\t#else\r\n\r\n\tuniform float morphTargetInfluences[ 4 ];\r\n\r\n\t#endif\r\n\r\n#endif',
	'morphtarget_vertex': '#ifdef USE_MORPHTARGETS\r\n\r\n\tvec3 morphed = vec3( 0.0 );\r\n\tmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\r\n\tmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\r\n\tmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\r\n\tmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\r\n\r\n\t#ifndef USE_MORPHNORMALS\r\n\r\n\tmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\r\n\tmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\r\n\tmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\r\n\tmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\r\n\r\n\t#endif\r\n\r\n\tmorphed += position;\r\n\r\n#endif',
	'normalmap_pars_fragment': '#ifdef USE_NORMALMAP\r\n\r\n\tuniform sampler2D normalMap;\r\n\tuniform vec2 normalScale;\r\n\r\n\t// Per-Pixel Tangent Space Normal Mapping\r\n\t// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\r\n\r\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\r\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\r\n\t\tvec2 st0 = dFdx( vUv.st );\r\n\t\tvec2 st1 = dFdy( vUv.st );\r\n\r\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\r\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\r\n\t\tvec3 N = normalize( surf_norm );\r\n\r\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\r\n\t\tmapN.xy = normalScale * mapN.xy;\r\n\t\tmat3 tsn = mat3( S, T, N );\r\n\t\treturn normalize( tsn * mapN );\r\n\r\n\t}\r\n\r\n#endif\r\n',
	'shadowmap_fragment': '#ifdef USE_SHADOWMAP\r\n\r\n\t#ifdef SHADOWMAP_DEBUG\r\n\r\n\t\tvec3 frustumColors[3];\r\n\t\tfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\r\n\t\tfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\r\n\t\tfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\r\n\r\n\t#endif\r\n\r\n\t#ifdef SHADOWMAP_CASCADE\r\n\r\n\t\tint inFrustumCount = 0;\r\n\r\n\t#endif\r\n\r\n\tfloat fDepth;\r\n\tvec3 shadowColor = vec3( 1.0 );\r\n\r\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\r\n\r\n\t\tvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\r\n\r\n\t\t\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\r\n\t\t\t\t// if ( all( something, something ) ) using this instead\r\n\r\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\r\n\t\tbool inFrustum = all( inFrustumVec );\r\n\r\n\t\t\t\t// don\'t shadow pixels outside of light frustum\r\n\t\t\t\t// use just first frustum (for cascades)\r\n\t\t\t\t// don\'t shadow pixels behind far plane of light frustum\r\n\r\n\t\t#ifdef SHADOWMAP_CASCADE\r\n\r\n\t\t\tinFrustumCount += int( inFrustum );\r\n\t\t\tbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\r\n\r\n\t\t#else\r\n\r\n\t\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\r\n\r\n\t\t#endif\r\n\r\n\t\tbool frustumTest = all( frustumTestVec );\r\n\r\n\t\tif ( frustumTest ) {\r\n\r\n\t\t\tshadowCoord.z += shadowBias[ i ];\r\n\r\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF )\r\n\r\n\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\tfloat shadow = 0.0;\r\n\r\n\t\t/*\r\n\t\t\t\t\t\t// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\r\n\t\t\t\t\t\t// must enroll loop manually\r\n\r\n\t\t\t\tfor ( float y = -1.25; y <= 1.25; y += 1.25 )\r\n\t\t\t\t\tfor ( float x = -1.25; x <= 1.25; x += 1.25 ) {\r\n\r\n\t\t\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\r\n\r\n\t\t\t\t\t\t\t\t// doesn\'t seem to produce any noticeable visual difference compared to simple texture2D lookup\r\n\t\t\t\t\t\t\t\t//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\r\n\r\n\t\t\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\r\n\r\n\t\t\t\t\t\tif ( fDepth < shadowCoord.z )\r\n\t\t\t\t\t\t\tshadow += 1.0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshadow /= 9.0;\r\n\r\n\t\t*/\r\n\r\n\t\t\t\tconst float shadowDelta = 1.0 / 9.0;\r\n\r\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\r\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\r\n\r\n\t\t\t\tfloat dx0 = -1.25 * xPixelOffset;\r\n\t\t\t\tfloat dy0 = -1.25 * yPixelOffset;\r\n\t\t\t\tfloat dx1 = 1.25 * xPixelOffset;\r\n\t\t\t\tfloat dy1 = 1.25 * yPixelOffset;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\r\n\t\t\t\tif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\r\n\r\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\r\n\r\n\t\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\r\n\r\n\t\t\t\t\t\t// Percentage-close filtering\r\n\t\t\t\t\t\t// (9 pixel kernel)\r\n\t\t\t\t\t\t// http://fabiensanglard.net/shadowmappingPCF/\r\n\r\n\t\t\t\tfloat shadow = 0.0;\r\n\r\n\t\t\t\tfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\r\n\t\t\t\tfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\r\n\r\n\t\t\t\tfloat dx0 = -1.0 * xPixelOffset;\r\n\t\t\t\tfloat dy0 = -1.0 * yPixelOffset;\r\n\t\t\t\tfloat dx1 = 1.0 * xPixelOffset;\r\n\t\t\t\tfloat dy1 = 1.0 * yPixelOffset;\r\n\r\n\t\t\t\tmat3 shadowKernel;\r\n\t\t\t\tmat3 depthKernel;\r\n\r\n\t\t\t\tdepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\r\n\t\t\t\tdepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\r\n\t\t\t\tdepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\r\n\t\t\t\tdepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\r\n\t\t\t\tdepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\r\n\t\t\t\tdepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\r\n\t\t\t\tdepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\r\n\t\t\t\tdepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\r\n\t\t\t\tdepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\r\n\r\n\t\t\t\tvec3 shadowZ = vec3( shadowCoord.z );\r\n\t\t\t\tshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\r\n\t\t\t\tshadowKernel[0] *= vec3(0.25);\r\n\r\n\t\t\t\tshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\r\n\t\t\t\tshadowKernel[1] *= vec3(0.25);\r\n\r\n\t\t\t\tshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\r\n\t\t\t\tshadowKernel[2] *= vec3(0.25);\r\n\r\n\t\t\t\tvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\r\n\r\n\t\t\t\tshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\r\n\t\t\t\tshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\r\n\r\n\t\t\t\tvec4 shadowValues;\r\n\t\t\t\tshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\r\n\t\t\t\tshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\r\n\t\t\t\tshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\r\n\t\t\t\tshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\r\n\r\n\t\t\t\tshadow = dot( shadowValues, vec4( 1.0 ) );\r\n\r\n\t\t\t\tshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\tvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\r\n\t\t\t\tfloat fDepth = unpackDepth( rgbaDepth );\r\n\r\n\t\t\t\tif ( fDepth < shadowCoord.z )\r\n\r\n\t\t// spot with multiple shadows is darker\r\n\r\n\t\t\t\t\tshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\r\n\r\n\t\t// spot with multiple shadows has the same color as single shadow spot\r\n\r\n\t\t// \t\t\t\t\tshadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t}\r\n\r\n\r\n\t\t#ifdef SHADOWMAP_DEBUG\r\n\r\n\t\t\t#ifdef SHADOWMAP_CASCADE\r\n\r\n\t\t\t\tif ( inFrustum && inFrustumCount == 1 ) outgoingLight *= frustumColors[ i ];\r\n\r\n\t\t\t#else\r\n\r\n\t\t\t\tif ( inFrustum ) outgoingLight *= frustumColors[ i ];\r\n\r\n\t\t\t#endif\r\n\r\n\t\t#endif\r\n\r\n\t}\r\n\r\n\t// NOTE: I am unsure if this is correct in linear space.  -bhouston, Dec 29, 2014\r\n\tshadowColor = inputToLinear( shadowColor );\r\n\r\n\toutgoingLight = outgoingLight * shadowColor;\r\n\r\n#endif\r\n',
	'shadowmap_pars_vertex': '#ifdef USE_SHADOWMAP\r\n\r\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\r\n\tuniform mat4 shadowMatrix[ MAX_SHADOWS ];\r\n\r\n#endif',
	'shadowmap_pars_fragment': '#ifdef USE_SHADOWMAP\r\n\r\n\tuniform sampler2D shadowMap[ MAX_SHADOWS ];\r\n\tuniform vec2 shadowMapSize[ MAX_SHADOWS ];\r\n\r\n\tuniform float shadowDarkness[ MAX_SHADOWS ];\r\n\tuniform float shadowBias[ MAX_SHADOWS ];\r\n\r\n\tvarying vec4 vShadowCoord[ MAX_SHADOWS ];\r\n\r\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\r\n\r\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\r\n\t\tfloat depth = dot( rgba_depth, bit_shift );\r\n\t\treturn depth;\r\n\r\n\t}\r\n\r\n#endif',
	'shadowmap_vertex': '#ifdef USE_SHADOWMAP\r\n\r\n\tfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\r\n\r\n\t\tvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\r\n\r\n\t}\r\n\r\n#endif',
	'skinbase_vertex': '#ifdef USE_SKINNING\r\n\r\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\r\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\r\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\r\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\r\n\r\n#endif',
	'skinning_pars_vertex': '#ifdef USE_SKINNING\r\n\r\n\tuniform mat4 bindMatrix;\r\n\tuniform mat4 bindMatrixInverse;\r\n\r\n\t#ifdef BONE_TEXTURE\r\n\r\n\t\tuniform sampler2D boneTexture;\r\n\t\tuniform int boneTextureWidth;\r\n\t\tuniform int boneTextureHeight;\r\n\r\n\t\tmat4 getBoneMatrix( const in float i ) {\r\n\r\n\t\t\tfloat j = i * 4.0;\r\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\r\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\r\n\r\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\r\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\r\n\r\n\t\t\ty = dy * ( y + 0.5 );\r\n\r\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\r\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\r\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\r\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\r\n\r\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\r\n\r\n\t\t\treturn bone;\r\n\r\n\t\t}\r\n\r\n\t#else\r\n\r\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\r\n\r\n\t\tmat4 getBoneMatrix( const in float i ) {\r\n\r\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\r\n\t\t\treturn bone;\r\n\r\n\t\t}\r\n\r\n\t#endif\r\n\r\n#endif\r\n',
	'skinning_vertex': '#ifdef USE_SKINNING\r\n\r\n\t#ifdef USE_MORPHTARGETS\r\n\r\n\tvec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\r\n\r\n\t#else\r\n\r\n\tvec4 skinVertex = bindMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n\tvec4 skinned = vec4( 0.0 );\r\n\tskinned += boneMatX * skinVertex * skinWeight.x;\r\n\tskinned += boneMatY * skinVertex * skinWeight.y;\r\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\r\n\tskinned += boneMatW * skinVertex * skinWeight.w;\r\n\tskinned  = bindMatrixInverse * skinned;\r\n\r\n#endif\r\n',
	'specularmap_fragment': 'float specularStrength;\r\n\r\n#ifdef USE_SPECULARMAP\r\n\r\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\r\n\tspecularStrength = texelSpecular.r;\r\n\r\n#else\r\n\r\n\tspecularStrength = 1.0;\r\n\r\n#endif',
	'skinnormal_vertex': '#ifdef USE_SKINNING\r\n\r\n\tmat4 skinMatrix = mat4( 0.0 );\r\n\tskinMatrix += skinWeight.x * boneMatX;\r\n\tskinMatrix += skinWeight.y * boneMatY;\r\n\tskinMatrix += skinWeight.z * boneMatZ;\r\n\tskinMatrix += skinWeight.w * boneMatW;\r\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\r\n\r\n\t#ifdef USE_MORPHNORMALS\r\n\r\n\tvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\r\n\r\n\t#else\r\n\r\n\tvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\r\n\r\n\t#endif\r\n\r\n#endif\r\n',
	'specularmap_pars_fragment': '#ifdef USE_SPECULARMAP\r\n\r\n\tuniform sampler2D specularMap;\r\n\r\n#endif',
	'worldpos_vertex': '#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\r\n\r\n\t#ifdef USE_SKINNING\r\n\r\n\t\tvec4 worldPosition = modelMatrix * skinned;\r\n\r\n\t#elif defined( USE_MORPHTARGETS )\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\r\n\r\n\t#else\r\n\r\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\r\n\t#endif\r\n\r\n#endif\r\n'
};
exports.ShaderChunk = ShaderChunk;