/**
 * @author mrdoob / http://mrdoob.com/
 */
var CacheModule = require('./Cache');
var LoadingManagerModule = require('./LoadingManager');
var XHRLoader;
XHRLoader = function (manager) {
	this.manager = manager !== undefined ? manager : LoadingManagerModule.DefaultLoadingManager;
};
XHRLoader.prototype = {
	constructor: XHRLoader,
	load: function (url, onLoad, onProgress, onError) {
		var scope = this;
		var cached = CacheModule.Cache.get(url);
		if (cached !== undefined) {
			if (onLoad)
				onLoad(cached);
			return;
		}
		var request = new XMLHttpRequest();
		request.open('GET', url, true);
		request.addEventListener('load', function (event) {
			CacheModule.Cache.add(url, this.response);
			if (onLoad)
				onLoad(this.response);
			scope.manager.itemEnd(url);
		}, false);
		if (onProgress !== undefined) {
			request.addEventListener('progress', function (event) {
				onProgress(event);
			}, false);
		}
		if (onError !== undefined) {
			request.addEventListener('error', function (event) {
				onError(event);
			}, false);
		}
		if (this.crossOrigin !== undefined)
			request.crossOrigin = this.crossOrigin;
		if (this.responseType !== undefined)
			request.responseType = this.responseType;
		request.send(null);
		scope.manager.itemStart(url);
	},
	setResponseType: function (value) {
		this.responseType = value;
	},
	setCrossOrigin: function (value) {
		this.crossOrigin = value;
	}
};
XHRLoader.prototype.isXHRLoader = true;
exports.XHRLoader = XHRLoader;