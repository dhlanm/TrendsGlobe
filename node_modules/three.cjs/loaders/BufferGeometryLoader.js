/**
 * @author mrdoob / http://mrdoob.com/
 */
var SphereModule = require('../math/Sphere');
var Vector3Module = require('../math/Vector3');
var BufferAttributeModule = require('../core/BufferAttribute');
var BufferGeometryModule = require('../core/BufferGeometry');
var XHRLoaderModule = require('./XHRLoader');
var LoadingManagerModule = require('./LoadingManager');
var BufferGeometryLoader;
BufferGeometryLoader = function (manager) {
	this.manager = manager !== undefined ? manager : LoadingManagerModule.DefaultLoadingManager;
};
BufferGeometryLoader.prototype = {
	constructor: BufferGeometryLoader,
	load: function (url, onLoad, onProgress, onError) {
		var scope = this;
		var loader = new XHRLoaderModule.XHRLoader(scope.manager);
		loader.setCrossOrigin(this.crossOrigin);
		loader.load(url, function (text) {
			onLoad(scope.parse(JSON.parse(text)));
		}, onProgress, onError);
	},
	setCrossOrigin: function (value) {
		this.crossOrigin = value;
	},
	parse: function (json) {
		var geometry = new BufferGeometryModule.BufferGeometry();
		var attributes = json.data.attributes;
		for (var key in attributes) {
			var attribute = attributes[key];
			var typedArray = new self[attribute.type](attribute.array);
			geometry.addAttribute(key, new BufferAttributeModule.BufferAttribute(typedArray, attribute.itemSize));
		}
		var offsets = json.data.offsets;
		if (offsets !== undefined) {
			geometry.offsets = JSON.parse(JSON.stringify(offsets));
		}
		var boundingSphere = json.data.boundingSphere;
		if (boundingSphere !== undefined) {
			var center = new Vector3Module.Vector3();
			if (boundingSphere.center !== undefined) {
				center.fromArray(boundingSphere.center);
			}
			geometry.boundingSphere = new SphereModule.Sphere(center, boundingSphere.radius);
		}
		return geometry;
	}
};
BufferGeometryLoader.prototype.isBufferGeometryLoader = true;
exports.BufferGeometryLoader = BufferGeometryLoader;