/**
 * @author mrdoob / http://mrdoob.com/
 */
var SphereModule = require('../math/Sphere');
var Vector3Module = require('../math/Vector3');
var GeometryModule = require('../core/Geometry');
var XHRLoaderModule = require('./XHRLoader');
var LoadingManagerModule = require('./LoadingManager');
var GeometryLoader;
GeometryLoader = function (manager) {
	this.manager = manager !== undefined ? manager : LoadingManagerModule.DefaultLoadingManager;
};
GeometryLoader.prototype = {
	constructor: GeometryLoader,
	load: function (url, onLoad, onProgress, onError) {
		var scope = this;
		var loader = new XHRLoaderModule.XHRLoader();
		loader.setCrossOrigin(this.crossOrigin);
		loader.load(url, function (text) {
			onLoad(scope.parse(JSON.parse(text)));
		}, onProgress, onError);
	},
	setCrossOrigin: function (value) {
		this.crossOrigin = value;
	},
	parse: function (json) {
		var geometry = new GeometryModule.Geometry();
		geometry.indices = json.indices;
		geometry.vertices = json.vertices;
		geometry.normals = json.normals;
		geometry.uvs = json.uvs;
		var boundingSphere = json.boundingSphere;
		if (boundingSphere !== undefined) {
			var center = new Vector3Module.Vector3();
			if (boundingSphere.center !== undefined) {
				center.fromArray(boundingSphere.center);
			}
			geometry.boundingSphere = new SphereModule.Sphere(center, boundingSphere.radius);
		}
		return geometry;
	}
};
GeometryLoader.prototype.isGeometryLoader = true;
exports.GeometryLoader = GeometryLoader;