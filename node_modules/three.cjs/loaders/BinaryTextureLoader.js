/**
 * @author Nikos M. / https://github.com/foo123/
 *
 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
 */
var Three = require('../Three');
var XHRLoaderModule = require('./XHRLoader');
var DataTextureModule = require('../textures/DataTexture');
var BinaryTextureLoader;
exports.DataTextureLoader = BinaryTextureLoader = function () {
	// override in sub classes
	this._parser = null;
};
BinaryTextureLoader.prototype = {
	constructor: BinaryTextureLoader,
	load: function (url, onLoad, onProgress, onError) {
		var scope = this;
		var texture = new DataTextureModule.DataTexture();
		var loader = new XHRLoaderModule.XHRLoader();
		loader.setResponseType('arraybuffer');
		loader.load(url, function (buffer) {
			var texData = scope._parser(buffer);
			if (!texData)
				return;
			if (undefined !== texData.image) {
				texture.image = texData.image;
			} else if (undefined !== texData.data) {
				texture.image.width = texData.width;
				texture.image.height = texData.height;
				texture.image.data = texData.data;
			}
			texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : Three.ClampToEdgeWrapping;
			texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : Three.ClampToEdgeWrapping;
			texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : Three.LinearFilter;
			texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : Three.LinearMipMapLinearFilter;
			texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;
			if (undefined !== texData.format) {
				texture.format = texData.format;
			}
			if (undefined !== texData.type) {
				texture.type = texData.type;
			}
			if (undefined !== texData.mipmaps) {
				texture.mipmaps = texData.mipmaps;
			}
			if (1 === texData.mipmapCount) {
				texture.minFilter = Three.LinearFilter;
			}
			texture.needsUpdate = true;
			if (onLoad)
				onLoad(texture, texData);
		}, onProgress, onError);
		return texture;
	}
};
if (typeof exports.DataTextureLoader === 'function')
	exports.DataTextureLoader.prototype.isDataTextureLoader = true;
BinaryTextureLoader.prototype.isBinaryTextureLoader = true;
exports.BinaryTextureLoader = BinaryTextureLoader;