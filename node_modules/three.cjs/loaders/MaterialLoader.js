/**
 * @author mrdoob / http://mrdoob.com/
 */
var SpriteMaterialModule = require('../materials/SpriteMaterial');
var ShaderMaterialModule = require('../materials/ShaderMaterial');
var RawShaderMaterialModule = require('../materials/RawShaderMaterial');
var PointCloudMaterialModule = require('../materials/PointCloudMaterial');
var MeshPhongMaterialModule = require('../materials/MeshPhongMaterial');
var MeshNormalMaterialModule = require('../materials/MeshNormalMaterial');
var MeshLambertMaterialModule = require('../materials/MeshLambertMaterial');
var MeshFaceMaterialModule = require('../materials/MeshFaceMaterial');
var MeshDepthMaterialModule = require('../materials/MeshDepthMaterial');
var MeshBasicMaterialModule = require('../materials/MeshBasicMaterial');
var LineDashedMaterialModule = require('../materials/LineDashedMaterial');
var LineBasicMaterialModule = require('../materials/LineBasicMaterial');
var MaterialModule = require('../materials/Material');
var XHRLoaderModule = require('./XHRLoader');
var LoadingManagerModule = require('./LoadingManager');
var MaterialLoader;
MaterialLoader = function (manager) {
	this.manager = manager !== undefined ? manager : LoadingManagerModule.DefaultLoadingManager;
};
MaterialLoader.prototype = {
	constructor: MaterialLoader,
	load: function (url, onLoad, onProgress, onError) {
		var scope = this;
		var loader = new XHRLoaderModule.XHRLoader(scope.manager);
		loader.setCrossOrigin(this.crossOrigin);
		loader.load(url, function (text) {
			onLoad(scope.parse(JSON.parse(text)));
		}, onProgress, onError);
	},
	setCrossOrigin: function (value) {
		this.crossOrigin = value;
	},
	parse: function (json) {
		var materialLookup = {
			Material: MaterialModule.Material,
			LineBasicMaterial: LineBasicMaterialModule.LineBasicMaterial,
			LineDashedMaterial: LineDashedMaterialModule.LineDashedMaterial,
			MeshBasicMaterial: MeshBasicMaterialModule.MeshBasicMaterial,
			MeshDepthMaterial: MeshDepthMaterialModule.MeshDepthMaterial,
			MeshFaceMaterial: MeshFaceMaterialModule.MeshFaceMaterial,
			MeshLambertMaterial: MeshLambertMaterialModule.MeshLambertMaterial,
			MeshNormalMaterial: MeshNormalMaterialModule.MeshNormalMaterial,
			MeshPhongMaterial: MeshPhongMaterialModule.MeshPhongMaterial,
			PointCloudMaterial: PointCloudMaterialModule.PointCloudMaterial,
			RawShaderMaterial: RawShaderMaterialModule.RawShaderMaterial,
			ShaderMaterial: ShaderMaterialModule.ShaderMaterial,
			SpriteMaterial: SpriteMaterialModule.SpriteMaterial
		};
		var material = new materialLookup[json.type]();
		if (json.color !== undefined)
			material.color.setHex(json.color);
		if (json.emissive !== undefined)
			material.emissive.setHex(json.emissive);
		if (json.specular !== undefined)
			material.specular.setHex(json.specular);
		if (json.shininess !== undefined)
			material.shininess = json.shininess;
		if (json.uniforms !== undefined)
			material.uniforms = json.uniforms;
		if (json.vertexShader !== undefined)
			material.vertexShader = json.vertexShader;
		if (json.fragmentShader !== undefined)
			material.fragmentShader = json.fragmentShader;
		if (json.vertexColors !== undefined)
			material.vertexColors = json.vertexColors;
		if (json.shading !== undefined)
			material.shading = json.shading;
		if (json.blending !== undefined)
			material.blending = json.blending;
		if (json.side !== undefined)
			material.side = json.side;
		if (json.opacity !== undefined)
			material.opacity = json.opacity;
		if (json.transparent !== undefined)
			material.transparent = json.transparent;
		if (json.wireframe !== undefined)
			material.wireframe = json.wireframe;
		// for PointCloudMaterial
		if (json.size !== undefined)
			material.size = json.size;
		if (json.sizeAttenuation !== undefined)
			material.sizeAttenuation = json.sizeAttenuation;
		if (json.materials !== undefined) {
			for (var i = 0, l = json.materials.length; i < l; i++) {
				material.materials.push(this.parse(json.materials[i]));
			}
		}
		return material;
	}
};
MaterialLoader.prototype.isMaterialLoader = true;
exports.MaterialLoader = MaterialLoader;