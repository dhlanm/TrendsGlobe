/**
 * @author mrdoob / http://mrdoob.com/
 */
var Three = require('../Three');
var Float64Attribute;
var Float32Attribute;
var Uint32Attribute;
var Int32Attribute;
var Uint16Attribute;
var Int16Attribute;
var Uint8ClampedAttribute;
var Uint8Attribute;
var Int8Attribute;
var BufferAttribute;
BufferAttribute = function (array, itemSize) {
	this.array = array;
	this.itemSize = itemSize;
	this.needsUpdate = false;
};
BufferAttribute.prototype = {
	constructor: BufferAttribute,
	get length() {
		return this.array.length;
	},
	copyAt: function (index1, attribute, index2) {
		index1 *= this.itemSize;
		index2 *= attribute.itemSize;
		for (var i = 0, l = this.itemSize; i < l; i++) {
			this.array[index1 + i] = attribute.array[index2 + i];
		}
		return this;
	},
	set: function (value, offset) {
		if (offset === undefined)
			offset = 0;
		this.array.set(value, offset);
		return this;
	},
	setX: function (index, x) {
		this.array[index * this.itemSize] = x;
		return this;
	},
	setY: function (index, y) {
		this.array[index * this.itemSize + 1] = y;
		return this;
	},
	setZ: function (index, z) {
		this.array[index * this.itemSize + 2] = z;
		return this;
	},
	setXY: function (index, x, y) {
		index *= this.itemSize;
		this.array[index] = x;
		this.array[index + 1] = y;
		return this;
	},
	setXYZ: function (index, x, y, z) {
		index *= this.itemSize;
		this.array[index] = x;
		this.array[index + 1] = y;
		this.array[index + 2] = z;
		return this;
	},
	setXYZW: function (index, x, y, z, w) {
		index *= this.itemSize;
		this.array[index] = x;
		this.array[index + 1] = y;
		this.array[index + 2] = z;
		this.array[index + 3] = w;
		return this;
	},
	clone: function () {
		return new BufferAttribute(new this.array.constructor(this.array), this.itemSize);
	}
};
//
Int8Attribute = function (data, itemSize) {
	Three.warn('THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
Uint8Attribute = function (data, itemSize) {
	Three.warn('THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
Uint8ClampedAttribute = function (data, itemSize) {
	Three.warn('THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
Int16Attribute = function (data, itemSize) {
	Three.warn('THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
Uint16Attribute = function (data, itemSize) {
	Three.warn('THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
Int32Attribute = function (data, itemSize) {
	Three.warn('THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
Uint32Attribute = function (data, itemSize) {
	Three.warn('THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
Float32Attribute = function (data, itemSize) {
	Three.warn('THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
Float64Attribute = function (data, itemSize) {
	Three.warn('THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.');
	return new BufferAttribute(data, itemSize);
};
BufferAttribute.prototype.isBufferAttribute = true;
exports.BufferAttribute = BufferAttribute;
Int8Attribute.prototype.isInt8Attribute = true;
exports.Int8Attribute = Int8Attribute;
Uint8Attribute.prototype.isUint8Attribute = true;
exports.Uint8Attribute = Uint8Attribute;
Uint8ClampedAttribute.prototype.isUint8ClampedAttribute = true;
exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
Int16Attribute.prototype.isInt16Attribute = true;
exports.Int16Attribute = Int16Attribute;
Uint16Attribute.prototype.isUint16Attribute = true;
exports.Uint16Attribute = Uint16Attribute;
Int32Attribute.prototype.isInt32Attribute = true;
exports.Int32Attribute = Int32Attribute;
Uint32Attribute.prototype.isUint32Attribute = true;
exports.Uint32Attribute = Uint32Attribute;
Float32Attribute.prototype.isFloat32Attribute = true;
exports.Float32Attribute = Float32Attribute;
Float64Attribute.prototype.isFloat64Attribute = true;
exports.Float64Attribute = Float64Attribute;