/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */
var ColorModule = require('../math/Color');
var Vector3Module = require('../math/Vector3');
var Face3;
var toString = Object.prototype.toString;
var instance;
Face3 = function (a, b, c, normal, color, materialIndex) {
	this.a = a;
	this.b = b;
	this.c = c;
	this.normal = !!(instance = normal) && !!instance.isVector3 ? normal : new Vector3Module.Vector3();
	this.vertexNormals = toString.call(normal).slice(8, -1) === 'Array' ? normal : [];
	this.color = !!(instance = color) && !!instance.isColor ? color : new ColorModule.Color();
	this.vertexColors = toString.call(color).slice(8, -1) === 'Array' ? color : [];
	this.vertexTangents = [];
	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
};
Face3.prototype = {
	constructor: Face3,
	clone: function () {
		var face = new Face3(this.a, this.b, this.c);
		face.normal.copy(this.normal);
		face.color.copy(this.color);
		face.materialIndex = this.materialIndex;
		for (var i = 0, il = this.vertexNormals.length; i < il; i++) {
			face.vertexNormals[i] = this.vertexNormals[i].clone();
		}
		for (var i = 0, il = this.vertexColors.length; i < il; i++) {
			face.vertexColors[i] = this.vertexColors[i].clone();
		}
		for (var i = 0, il = this.vertexTangents.length; i < il; i++) {
			face.vertexTangents[i] = this.vertexTangents[i].clone();
		}
		return face;
	}
};
Face3.prototype.isFace3 = true;
exports.Face3 = Face3;