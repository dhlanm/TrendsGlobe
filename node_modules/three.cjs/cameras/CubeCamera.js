/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */
var Three = require('../Three');
var WebGLRenderTargetCubeModule = require('../renderers/WebGLRenderTargetCube');
var Vector3Module = require('../math/Vector3');
var PerspectiveCameraModule = require('./PerspectiveCamera');
var Object3DModule = require('../core/Object3D');
var CubeCamera;
CubeCamera = function (near, far, cubeResolution) {
	Object3DModule.Object3D.call(this);
	this.type = 'CubeCamera';
	var fov = 90, aspect = 1;
	var cameraPX = new PerspectiveCameraModule.PerspectiveCamera(fov, aspect, near, far);
	cameraPX.up.set(0, -1, 0);
	cameraPX.lookAt(new Vector3Module.Vector3(1, 0, 0));
	this.add(cameraPX);
	var cameraNX = new PerspectiveCameraModule.PerspectiveCamera(fov, aspect, near, far);
	cameraNX.up.set(0, -1, 0);
	cameraNX.lookAt(new Vector3Module.Vector3(-1, 0, 0));
	this.add(cameraNX);
	var cameraPY = new PerspectiveCameraModule.PerspectiveCamera(fov, aspect, near, far);
	cameraPY.up.set(0, 0, 1);
	cameraPY.lookAt(new Vector3Module.Vector3(0, 1, 0));
	this.add(cameraPY);
	var cameraNY = new PerspectiveCameraModule.PerspectiveCamera(fov, aspect, near, far);
	cameraNY.up.set(0, 0, -1);
	cameraNY.lookAt(new Vector3Module.Vector3(0, -1, 0));
	this.add(cameraNY);
	var cameraPZ = new PerspectiveCameraModule.PerspectiveCamera(fov, aspect, near, far);
	cameraPZ.up.set(0, -1, 0);
	cameraPZ.lookAt(new Vector3Module.Vector3(0, 0, 1));
	this.add(cameraPZ);
	var cameraNZ = new PerspectiveCameraModule.PerspectiveCamera(fov, aspect, near, far);
	cameraNZ.up.set(0, -1, 0);
	cameraNZ.lookAt(new Vector3Module.Vector3(0, 0, -1));
	this.add(cameraNZ);
	this.renderTarget = new WebGLRenderTargetCubeModule.WebGLRenderTargetCube(cubeResolution, cubeResolution, {
		format: Three.RGBFormat,
		magFilter: Three.LinearFilter,
		minFilter: Three.LinearFilter
	});
	this.updateCubeMap = function (renderer, scene) {
		var renderTarget = this.renderTarget;
		var generateMipmaps = renderTarget.generateMipmaps;
		renderTarget.generateMipmaps = false;
		renderTarget.activeCubeFace = 0;
		renderer.render(scene, cameraPX, renderTarget);
		renderTarget.activeCubeFace = 1;
		renderer.render(scene, cameraNX, renderTarget);
		renderTarget.activeCubeFace = 2;
		renderer.render(scene, cameraPY, renderTarget);
		renderTarget.activeCubeFace = 3;
		renderer.render(scene, cameraNY, renderTarget);
		renderTarget.activeCubeFace = 4;
		renderer.render(scene, cameraPZ, renderTarget);
		renderTarget.generateMipmaps = generateMipmaps;
		renderTarget.activeCubeFace = 5;
		renderer.render(scene, cameraNZ, renderTarget);
	};
};
CubeCamera.prototype = Object.create(Object3DModule.Object3D.prototype);
CubeCamera.prototype.constructor = CubeCamera;
CubeCamera.prototype.isCubeCamera = true;
exports.CubeCamera = CubeCamera;