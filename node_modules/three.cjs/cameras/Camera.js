/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/
var Vector3Module = require('../math/Vector3');
var QuaternionModule = require('../math/Quaternion');
var Matrix4Module = require('../math/Matrix4');
var Object3DModule = require('../core/Object3D');
var Camera;
Camera = function () {
	Object3DModule.Object3D.call(this);
	this.type = 'Camera';
	this.matrixWorldInverse = new Matrix4Module.Matrix4();
	this.projectionMatrix = new Matrix4Module.Matrix4();
};
Camera.prototype = Object.create(Object3DModule.Object3D.prototype);
Camera.prototype.constructor = Camera;
Camera.prototype.getWorldDirection = function () {
	var quaternion = new QuaternionModule.Quaternion();
	return function (optionalTarget) {
		var result = optionalTarget || new Vector3Module.Vector3();
		this.getWorldQuaternion(quaternion);
		return result.set(0, 0, -1).applyQuaternion(quaternion);
	};
}();
Camera.prototype.lookAt = function () {
	// This routine does not support cameras with rotated and/or translated parent(s)
	var m1 = new Matrix4Module.Matrix4();
	return function (vector) {
		m1.lookAt(this.position, vector, this.up);
		this.quaternion.setFromRotationMatrix(m1);
	};
}();
Camera.prototype.clone = function (camera) {
	if (camera === undefined)
		camera = new Camera();
	Object3DModule.Object3D.prototype.clone.call(this, camera);
	camera.matrixWorldInverse.copy(this.matrixWorldInverse);
	camera.projectionMatrix.copy(this.projectionMatrix);
	return camera;
};
Camera.prototype.isCamera = true;
exports.Camera = Camera;