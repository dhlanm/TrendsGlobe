/**
 * @author mrdoob / http://mrdoob.com/
 */
var ColorKeywords;
var Color;
var instance;
Color = function (color) {
	if (arguments.length === 3) {
		return this.setRGB(arguments[0], arguments[1], arguments[2]);
	}
	return this.set(color);
};
Color.prototype = {
	constructor: Color,
	r: 1,
	g: 1,
	b: 1,
	set: function (value) {
		if (!!(instance = value) && !!instance.isColor) {
			this.copy(value);
		} else if (typeof value === 'number') {
			this.setHex(value);
		} else if (typeof value === 'string') {
			this.setStyle(value);
		}
		return this;
	},
	setHex: function (hex) {
		hex = Math.floor(hex);
		this.r = (hex >> 16 & 255) / 255;
		this.g = (hex >> 8 & 255) / 255;
		this.b = (hex & 255) / 255;
		return this;
	},
	setRGB: function (r, g, b) {
		this.r = r;
		this.g = g;
		this.b = b;
		return this;
	},
	setHSL: function (h, s, l) {
		// h,s,l ranges are in 0.0 - 1.0
		if (s === 0) {
			this.r = this.g = this.b = l;
		} else {
			var hue2rgb = function (p, q, t) {
				if (t < 0)
					t += 1;
				if (t > 1)
					t -= 1;
				if (t < 1 / 6)
					return p + (q - p) * 6 * t;
				if (t < 1 / 2)
					return q;
				if (t < 2 / 3)
					return p + (q - p) * 6 * (2 / 3 - t);
				return p;
			};
			var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;
			var q = 2 * l - p;
			this.r = hue2rgb(q, p, h + 1 / 3);
			this.g = hue2rgb(q, p, h);
			this.b = hue2rgb(q, p, h - 1 / 3);
		}
		return this;
	},
	setStyle: function (style) {
		// rgb(255,0,0)
		if (/^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test(style)) {
			var color = /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec(style);
			this.r = Math.min(255, parseInt(color[1], 10)) / 255;
			this.g = Math.min(255, parseInt(color[2], 10)) / 255;
			this.b = Math.min(255, parseInt(color[3], 10)) / 255;
			return this;
		}
		// rgb(100%,0%,0%)
		if (/^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test(style)) {
			var color = /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec(style);
			this.r = Math.min(100, parseInt(color[1], 10)) / 100;
			this.g = Math.min(100, parseInt(color[2], 10)) / 100;
			this.b = Math.min(100, parseInt(color[3], 10)) / 100;
			return this;
		}
		// #ff0000
		if (/^\#([0-9a-f]{6})$/i.test(style)) {
			var color = /^\#([0-9a-f]{6})$/i.exec(style);
			this.setHex(parseInt(color[1], 16));
			return this;
		}
		// #f00
		if (/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(style)) {
			var color = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(style);
			this.setHex(parseInt(color[1] + color[1] + color[2] + color[2] + color[3] + color[3], 16));
			return this;
		}
		// red
		if (/^(\w+)$/i.test(style)) {
			this.setHex(ColorKeywords[style]);
			return this;
		}
	},
	copy: function (color) {
		this.r = color.r;
		this.g = color.g;
		this.b = color.b;
		return this;
	},
	copyGammaToLinear: function (color, gammaFactor) {
		if (gammaFactor === undefined)
			gammaFactor = 2;
		this.r = Math.pow(color.r, gammaFactor);
		this.g = Math.pow(color.g, gammaFactor);
		this.b = Math.pow(color.b, gammaFactor);
		return this;
	},
	copyLinearToGamma: function (color, gammaFactor) {
		if (gammaFactor === undefined)
			gammaFactor = 2;
		var safeInverse = gammaFactor > 0 ? 1 / gammaFactor : 1;
		this.r = Math.pow(color.r, safeInverse);
		this.g = Math.pow(color.g, safeInverse);
		this.b = Math.pow(color.b, safeInverse);
		return this;
	},
	convertGammaToLinear: function () {
		var r = this.r, g = this.g, b = this.b;
		this.r = r * r;
		this.g = g * g;
		this.b = b * b;
		return this;
	},
	convertLinearToGamma: function () {
		this.r = Math.sqrt(this.r);
		this.g = Math.sqrt(this.g);
		this.b = Math.sqrt(this.b);
		return this;
	},
	getHex: function () {
		return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;
	},
	getHexString: function () {
		return ('000000' + this.getHex().toString(16)).slice(-6);
	},
	getHSL: function (optionalTarget) {
		// h,s,l ranges are in 0.0 - 1.0
		var hsl = optionalTarget || {
			h: 0,
			s: 0,
			l: 0
		};
		var r = this.r, g = this.g, b = this.b;
		var max = Math.max(r, g, b);
		var min = Math.min(r, g, b);
		var hue, saturation;
		var lightness = (min + max) / 2;
		if (min === max) {
			hue = 0;
			saturation = 0;
		} else {
			var delta = max - min;
			saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);
			switch (max) {
			case r:
				hue = (g - b) / delta + (g < b ? 6 : 0);
				break;
			case g:
				hue = (b - r) / delta + 2;
				break;
			case b:
				hue = (r - g) / delta + 4;
				break;
			}
			hue /= 6;
		}
		hsl.h = hue;
		hsl.s = saturation;
		hsl.l = lightness;
		return hsl;
	},
	getStyle: function () {
		return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';
	},
	offsetHSL: function (h, s, l) {
		var hsl = this.getHSL();
		hsl.h += h;
		hsl.s += s;
		hsl.l += l;
		this.setHSL(hsl.h, hsl.s, hsl.l);
		return this;
	},
	add: function (color) {
		this.r += color.r;
		this.g += color.g;
		this.b += color.b;
		return this;
	},
	addColors: function (color1, color2) {
		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;
		return this;
	},
	addScalar: function (s) {
		this.r += s;
		this.g += s;
		this.b += s;
		return this;
	},
	multiply: function (color) {
		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;
		return this;
	},
	multiplyScalar: function (s) {
		this.r *= s;
		this.g *= s;
		this.b *= s;
		return this;
	},
	lerp: function (color, alpha) {
		this.r += (color.r - this.r) * alpha;
		this.g += (color.g - this.g) * alpha;
		this.b += (color.b - this.b) * alpha;
		return this;
	},
	equals: function (c) {
		return c.r === this.r && c.g === this.g && c.b === this.b;
	},
	fromArray: function (array) {
		this.r = array[0];
		this.g = array[1];
		this.b = array[2];
		return this;
	},
	toArray: function (array, offset) {
		if (array === undefined)
			array = [];
		if (offset === undefined)
			offset = 0;
		array[offset] = this.r;
		array[offset + 1] = this.g;
		array[offset + 2] = this.b;
		return array;
	},
	clone: function () {
		return new Color().setRGB(this.r, this.g, this.b);
	}
};
ColorKeywords = {
	'aliceblue': 15792383,
	'antiquewhite': 16444375,
	'aqua': 65535,
	'aquamarine': 8388564,
	'azure': 15794175,
	'beige': 16119260,
	'bisque': 16770244,
	'black': 0,
	'blanchedalmond': 16772045,
	'blue': 255,
	'blueviolet': 9055202,
	'brown': 10824234,
	'burlywood': 14596231,
	'cadetblue': 6266528,
	'chartreuse': 8388352,
	'chocolate': 13789470,
	'coral': 16744272,
	'cornflowerblue': 6591981,
	'cornsilk': 16775388,
	'crimson': 14423100,
	'cyan': 65535,
	'darkblue': 139,
	'darkcyan': 35723,
	'darkgoldenrod': 12092939,
	'darkgray': 11119017,
	'darkgreen': 25600,
	'darkgrey': 11119017,
	'darkkhaki': 12433259,
	'darkmagenta': 9109643,
	'darkolivegreen': 5597999,
	'darkorange': 16747520,
	'darkorchid': 10040012,
	'darkred': 9109504,
	'darksalmon': 15308410,
	'darkseagreen': 9419919,
	'darkslateblue': 4734347,
	'darkslategray': 3100495,
	'darkslategrey': 3100495,
	'darkturquoise': 52945,
	'darkviolet': 9699539,
	'deeppink': 16716947,
	'deepskyblue': 49151,
	'dimgray': 6908265,
	'dimgrey': 6908265,
	'dodgerblue': 2003199,
	'firebrick': 11674146,
	'floralwhite': 16775920,
	'forestgreen': 2263842,
	'fuchsia': 16711935,
	'gainsboro': 14474460,
	'ghostwhite': 16316671,
	'gold': 16766720,
	'goldenrod': 14329120,
	'gray': 8421504,
	'green': 32768,
	'greenyellow': 11403055,
	'grey': 8421504,
	'honeydew': 15794160,
	'hotpink': 16738740,
	'indianred': 13458524,
	'indigo': 4915330,
	'ivory': 16777200,
	'khaki': 15787660,
	'lavender': 15132410,
	'lavenderblush': 16773365,
	'lawngreen': 8190976,
	'lemonchiffon': 16775885,
	'lightblue': 11393254,
	'lightcoral': 15761536,
	'lightcyan': 14745599,
	'lightgoldenrodyellow': 16448210,
	'lightgray': 13882323,
	'lightgreen': 9498256,
	'lightgrey': 13882323,
	'lightpink': 16758465,
	'lightsalmon': 16752762,
	'lightseagreen': 2142890,
	'lightskyblue': 8900346,
	'lightslategray': 7833753,
	'lightslategrey': 7833753,
	'lightsteelblue': 11584734,
	'lightyellow': 16777184,
	'lime': 65280,
	'limegreen': 3329330,
	'linen': 16445670,
	'magenta': 16711935,
	'maroon': 8388608,
	'mediumaquamarine': 6737322,
	'mediumblue': 205,
	'mediumorchid': 12211667,
	'mediumpurple': 9662683,
	'mediumseagreen': 3978097,
	'mediumslateblue': 8087790,
	'mediumspringgreen': 64154,
	'mediumturquoise': 4772300,
	'mediumvioletred': 13047173,
	'midnightblue': 1644912,
	'mintcream': 16121850,
	'mistyrose': 16770273,
	'moccasin': 16770229,
	'navajowhite': 16768685,
	'navy': 128,
	'oldlace': 16643558,
	'olive': 8421376,
	'olivedrab': 7048739,
	'orange': 16753920,
	'orangered': 16729344,
	'orchid': 14315734,
	'palegoldenrod': 15657130,
	'palegreen': 10025880,
	'paleturquoise': 11529966,
	'palevioletred': 14381203,
	'papayawhip': 16773077,
	'peachpuff': 16767673,
	'peru': 13468991,
	'pink': 16761035,
	'plum': 14524637,
	'powderblue': 11591910,
	'purple': 8388736,
	'red': 16711680,
	'rosybrown': 12357519,
	'royalblue': 4286945,
	'saddlebrown': 9127187,
	'salmon': 16416882,
	'sandybrown': 16032864,
	'seagreen': 3050327,
	'seashell': 16774638,
	'sienna': 10506797,
	'silver': 12632256,
	'skyblue': 8900331,
	'slateblue': 6970061,
	'slategray': 7372944,
	'slategrey': 7372944,
	'snow': 16775930,
	'springgreen': 65407,
	'steelblue': 4620980,
	'tan': 13808780,
	'teal': 32896,
	'thistle': 14204888,
	'tomato': 16737095,
	'turquoise': 4251856,
	'violet': 15631086,
	'wheat': 16113331,
	'white': 16777215,
	'whitesmoke': 16119285,
	'yellow': 16776960,
	'yellowgreen': 10145074
};
Color.prototype.isColor = true;
exports.Color = Color;
exports.ColorKeywords = ColorKeywords;