/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */
var Vector3Module = require('../math/Vector3');
var Object3DModule = require('../core/Object3D');
var LightModule = require('./Light');
var DirectionalLight;
DirectionalLight = function (color, intensity) {
	LightModule.Light.call(this, color);
	this.type = 'DirectionalLight';
	this.position.set(0, 1, 0);
	this.target = new Object3DModule.Object3D();
	this.intensity = intensity !== undefined ? intensity : 1;
	this.castShadow = false;
	this.onlyShadow = false;
	//
	this.shadowCameraNear = 50;
	this.shadowCameraFar = 5000;
	this.shadowCameraLeft = -500;
	this.shadowCameraRight = 500;
	this.shadowCameraTop = 500;
	this.shadowCameraBottom = -500;
	this.shadowCameraVisible = false;
	this.shadowBias = 0;
	this.shadowDarkness = 0.5;
	this.shadowMapWidth = 512;
	this.shadowMapHeight = 512;
	//
	this.shadowCascade = false;
	this.shadowCascadeOffset = new Vector3Module.Vector3(0, 0, -1000);
	this.shadowCascadeCount = 2;
	this.shadowCascadeBias = [
		0,
		0,
		0
	];
	this.shadowCascadeWidth = [
		512,
		512,
		512
	];
	this.shadowCascadeHeight = [
		512,
		512,
		512
	];
	this.shadowCascadeNearZ = [
		-1,
		0.99,
		0.998
	];
	this.shadowCascadeFarZ = [
		0.99,
		0.998,
		1
	];
	this.shadowCascadeArray = [];
	//
	this.shadowMap = null;
	this.shadowMapSize = null;
	this.shadowCamera = null;
	this.shadowMatrix = null;
};
DirectionalLight.prototype = Object.create(LightModule.Light.prototype);
DirectionalLight.prototype.constructor = DirectionalLight;
DirectionalLight.prototype.clone = function () {
	var light = new DirectionalLight();
	LightModule.Light.prototype.clone.call(this, light);
	light.target = this.target.clone();
	light.intensity = this.intensity;
	light.castShadow = this.castShadow;
	light.onlyShadow = this.onlyShadow;
	//
	light.shadowCameraNear = this.shadowCameraNear;
	light.shadowCameraFar = this.shadowCameraFar;
	light.shadowCameraLeft = this.shadowCameraLeft;
	light.shadowCameraRight = this.shadowCameraRight;
	light.shadowCameraTop = this.shadowCameraTop;
	light.shadowCameraBottom = this.shadowCameraBottom;
	light.shadowCameraVisible = this.shadowCameraVisible;
	light.shadowBias = this.shadowBias;
	light.shadowDarkness = this.shadowDarkness;
	light.shadowMapWidth = this.shadowMapWidth;
	light.shadowMapHeight = this.shadowMapHeight;
	//
	light.shadowCascade = this.shadowCascade;
	light.shadowCascadeOffset.copy(this.shadowCascadeOffset);
	light.shadowCascadeCount = this.shadowCascadeCount;
	light.shadowCascadeBias = this.shadowCascadeBias.slice(0);
	light.shadowCascadeWidth = this.shadowCascadeWidth.slice(0);
	light.shadowCascadeHeight = this.shadowCascadeHeight.slice(0);
	light.shadowCascadeNearZ = this.shadowCascadeNearZ.slice(0);
	light.shadowCascadeFarZ = this.shadowCascadeFarZ.slice(0);
	return light;
};
DirectionalLight.prototype.isDirectionalLight = true;
exports.DirectionalLight = DirectionalLight;